{
    "core": [
        {
            "name": "array_every",
            "parameters": {
                "required": [
                    {
                        "name": "callback",
                        "type": "function"
                    },
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "array_every(function $callback, array $array): boolean",
            "value": "array_every($0)",
            "documentation": "Returns true if all items in the array are true based on the result of the callback function.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_every)"
        },
        {
            "name": "array_filter",
            "parameters": {
                "required": [
                    {
                        "name": "callback",
                        "type": "function"
                    },
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "array_filter(function $callback, array $array): array",
            "value": "array_filter($0)",
            "documentation": "Returns the filtered items from the array using a callback.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_filter)"
        },
        {
            "name": "array_find",
            "parameters": {
                "required": [
                    {
                        "name": "callback",
                        "type": "function"
                    },
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "any",
            "detail": "array_find(function $callback, array $array): any",
            "value": "array_find($0)",
            "documentation": "Return the first element that matches in the array. If no element is found none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_find)"
        },
        {
            "name": "array_includes",
            "parameters": {
                "required": [
                    {
                        "name": "needle",
                        "type": "any"
                    },
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "array_includes(any $needle, array $array): boolean",
            "value": "array_includes($0)",
            "documentation": "Returns true if needle is found in the array.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_includes)"
        },
        {
            "name": "array_join",
            "parameters": {
                "required": [
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": [
                    {
                        "name": "separator",
                        "type": "string"
                    }
                ]
            },
            "returnType": "string",
            "detail": "array_join(array $array [, string $separator]): string",
            "value": "array_join($0)",
            "documentation": "Join the elements in the array with a separator returning a string",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_join)"
        },
        {
            "name": "array_keys",
            "parameters": {
                "required": [
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "array_keys(array $array): array",
            "value": "array_keys($0)",
            "documentation": "Returns the keys in the array.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_keys)"
        },
        {
            "name": "array_map",
            "parameters": {
                "required": [
                    {
                        "name": "callback",
                        "type": "function"
                    },
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "array_map(function $callback, array $array): array",
            "value": "array_map($0)",
            "documentation": "Returns values from the array with the callback applied.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_map)"
        },
        {
            "name": "array_range",
            "parameters": {
                "required": [
                    {
                        "name": "start",
                        "type": "number"
                    },
                    {
                        "name": "stop",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "step = 1",
                        "type": "number"
                    }
                ]
            },
            "returnType": "array",
            "detail": "array_range(number $start, number $stop [, number $step = 1]): array",
            "value": "array_range($0)",
            "documentation": "Returns an array from a numeric range (half-open) with the given steps.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_range)"
        },
        {
            "name": "array_reduce",
            "parameters": {
                "required": [
                    {
                        "name": "callback",
                        "type": "function"
                    },
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": [
                    {
                        "name": "initial",
                        "type": "any"
                    }
                ]
            },
            "returnType": "any",
            "detail": "array_reduce(function $callback, array $array [, any $initial]): any",
            "value": "array_reduce($0)",
            "documentation": "Reduces the values in the array using the callback from left-to-right, optionally starting with a initial value.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_reduce)"
        },
        {
            "name": "array_reverse",
            "parameters": {
                "required": [
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "array_reverse(array $array): array",
            "value": "array_reverse($0)",
            "documentation": "Return array in reverse order. Numeric keys are reindexed.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_reverse)"
        },
        {
            "name": "array_sort",
            "parameters": {
                "required": [
                    {
                        "name": "callback",
                        "type": "function"
                    },
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "array_sort(function $callback, array $array [, array $options]): array",
            "value": "array_sort($0)",
            "documentation": "Returns the array sorted (with index association maintained) using the callback function to determine the order. The sort is not guaranteed to be stable.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_sort)"
        },
        {
            "name": "array_shuffle",
            "parameters": {
                "required": [
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "array_shuffle(array $array): array",
            "value": "array_shuffle($0)",
            "documentation": "Return array in shuffled order. Numeric keys are reindexed.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_shuffle)"
        },
        {
            "name": "array_unique",
            "parameters": {
                "required": [
                    {
                        "name": "array",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "array_unique(array $array): array",
            "value": "array_unique($0)",
            "documentation": "Return an array with unique values (the first key is preserved).",
            "link": "[Full documentation]({{ docsurl }}functions.html#array_unique)"
        },
        {
            "name": "aes_decrypt",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "mode",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string or none",
            "detail": "aes_decrypt(string $message, string $key, string $mode [, array $options]): string or none",
            "value": "aes_decrypt($0)",
            "documentation": "Decrypt a message using AES. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#aes_decrypt)"
        },
        {
            "name": "aes_encrypt",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "mode",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string or none",
            "detail": "aes_encrypt(string $message, string $key, string $mode [, array $options]): string or none",
            "value": "aes_encrypt($0)",
            "documentation": "Encrypt a message using AES. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#aes_encrypt)"
        },
        {
            "name": "hmac_md5",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string",
            "detail": "hmac_md5(string $key, string $message [, array $options]): string",
            "value": "hmac_md5($0)",
            "documentation": "Return the HMAC MD5 hash of message with the key.",
            "link": "[Full documentation]({{ docsurl }}functions.html#hmac_md5)"
        },
        {
            "name": "hmac_sha1",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string",
            "detail": "hmac_sha1(string $key, string $message [, array $options]): string",
            "value": "hmac_sha1($0)",
            "documentation": "Return the HMAC SHA1 hash of message with the key.",
            "link": "[Full documentation]({{ docsurl }}functions.html#hmac_sha1)"
        },
        {
            "name": "hmac_sha2",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "hashsize",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string",
            "detail": "hmac_sha2(string $key, string $message, number $hashsize [, array $options]): string",
            "value": "hmac_sha2($0)",
            "documentation": "Return the HMAC SHA2 hash of message with the key.",
            "link": "[Full documentation]({{ docsurl }}functions.html#hmac_sha2)"
        },
        {
            "name": "md5",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string",
            "detail": "md5(string $message [, array $options]): string",
            "value": "md5($0)",
            "documentation": "Return the MD5 hash of message.",
            "link": "[Full documentation]({{ docsurl }}functions.html#md5)"
        },
        {
            "name": "sha1",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string",
            "detail": "sha1(string $message [, array $options]): string",
            "value": "sha1($0)",
            "documentation": "Return the SHA1 hash of message.",
            "link": "[Full documentation]({{ docsurl }}functions.html#sha1)"
        },
        {
            "name": "sha2",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "hashsize",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string",
            "detail": "sha2(string $message, number $hashsize [, array $options]): string",
            "value": "sha2($0)",
            "documentation": "Return the SHA2 hash of message.",
            "link": "[Full documentation]({{ docsurl }}functions.html#sha2)"
        },
        {
            "name": "hash",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "hash(string $message): number",
            "value": "hash($0)",
            "documentation": "Return the numeric hash value of the message. The hash value is same for equal messages.",
            "link": "[Full documentation]({{ docsurl }}functions.html#hash)"
        },
        {
            "name": "rsa_sign",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "privatekey",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string or none",
            "detail": "rsa_sign(string $message, string $privatekey [, array $options]): string or none",
            "value": "rsa_sign($0)",
            "documentation": "RSA sign a message digest using a hash function. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#rsa_sign)"
        },
        {
            "name": "rsa_verify",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "signature",
                        "type": "string"
                    },
                    {
                        "name": "publickey",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "boolean or none",
            "detail": "rsa_verify(string $message, string $signature, string $publickey [, array $options]): boolean or none",
            "value": "rsa_verify($0)",
            "documentation": "RSA verify a message digest using a hash function. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#rsa_verify)"
        },
        {
            "name": "ed25519_sign",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "privatekey",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "ed25519_sign(string $message, string $privatekey): string or none",
            "value": "ed25519_sign($0)",
            "documentation": "ED25519 sign a message. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#ed25519_sign)"
        },
        {
            "name": "ed25519_verify",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "signature",
                        "type": "string"
                    },
                    {
                        "name": "publickey",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean or none",
            "detail": "ed25519_verify(string $message, string $signature, string $publickey): boolean or none",
            "value": "ed25519_verify($0)",
            "documentation": "ED25519 verify a message. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#ed25519_verify)"
        },
        {
            "name": "pkcs7_sign",
            "parameters": {
                "required": [
                    {
                        "name": "message",
                        "type": "string"
                    },
                    {
                        "name": "certificate",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string or none",
            "detail": "pkcs7_sign(string $message, string $certificate [, array $options]): string or none",
            "value": "pkcs7_sign($0)",
            "documentation": "PKCS7 sign (S\/MIME) a message. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#pkcs7_sign)"
        },
        {
            "name": "random_bytes",
            "parameters": {
                "required": [
                    {
                        "name": "bytes",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "random_bytes(number $bytes): string",
            "value": "random_bytes($0)",
            "documentation": "Return a string of random bytes (at most 1MiB).",
            "link": "[Full documentation]({{ docsurl }}functions.html#random_bytes)"
        },
        {
            "name": "random_number",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "first",
                        "type": "number"
                    },
                    {
                        "name": "last",
                        "type": "number"
                    }
                ]
            },
            "returnType": "number",
            "detail": "random_number([number $first [, number $last]]): number",
            "value": "random_number($0)",
            "documentation": "Return a random integer between first and last (inclusive) or a random double (decimal) between 0 and 1 (inclusive).",
            "link": "[Full documentation]({{ docsurl }}functions.html#random_number)",
            "aliases": [
                "rand"
            ]
        },
        {
            "name": "crypt",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "salt",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "crypt(string $key, string $salt): string",
            "value": "crypt($0)",
            "documentation": "Uses the underlying operating system's crypt() function.",
            "link": "[Full documentation]({{ docsurl }}functions.html#crypt)"
        },
        {
            "name": "length",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "number or none",
            "detail": "length(any $value): number or none",
            "value": "length($0)",
            "documentation": "Return the length of an array (items) or a string (characters). For all other datatypes none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#length)",
            "aliases": [
                "count",
                "strlen"
            ]
        },
        {
            "name": "array",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "...args",
                        "type": "any"
                    }
                ]
            },
            "returnType": "array",
            "detail": "array([any ...$args]): array",
            "value": "array($0)",
            "documentation": "This function creates an array.",
            "link": "[Full documentation]({{ docsurl }}functions.html#array)"
        },
        {
            "name": "boolean",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "boolean(any $value): boolean",
            "value": "boolean($0)",
            "documentation": "This function converts the input of value to the boolean type (according to the truthiness) table.",
            "link": "[Full documentation]({{ docsurl }}functions.html#boolean)"
        },
        {
            "name": "number",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "number(any $value): number",
            "value": "number($0)",
            "documentation": "This function converts the input of value to the number type. Decimal and hexadecimal (Ox) numbers are supported. If the input contains an invalid number as string or type 0 is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#number)"
        },
        {
            "name": "string",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "string(any $value): string",
            "value": "string($0)",
            "documentation": "This function converts the input of value to the string type, hence converting it to its string representation.",
            "link": "[Full documentation]({{ docsurl }}functions.html#string)"
        },
        {
            "name": "is_array",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "is_array(any $value): boolean",
            "value": "is_array($0)",
            "documentation": "Returns true if the type of value is an array.",
            "link": "[Full documentation]({{ docsurl }}functions.html#is_array)"
        },
        {
            "name": "is_boolean",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "is_boolean(any $value): boolean",
            "value": "is_boolean($0)",
            "documentation": "Returns true if the type of value is a boolean.",
            "link": "[Full documentation]({{ docsurl }}functions.html#is_boolean)"
        },
        {
            "name": "is_function",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "is_function(any $value): boolean",
            "value": "is_function($0)",
            "documentation": "Returns true if the type of value is a function.",
            "link": "[Full documentation]({{ docsurl }}functions.html#is_function)"
        },
        {
            "name": "is_number",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "is_number(any $value): boolean",
            "value": "is_number($0)",
            "documentation": "Returns true if the type of value is a number.",
            "link": "[Full documentation]({{ docsurl }}functions.html#is_number)"
        },
        {
            "name": "is_object",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "is_object(any $value): boolean",
            "value": "is_object($0)",
            "documentation": "Returns true if the type of value is an object.",
            "link": "[Full documentation]({{ docsurl }}functions.html#is_object)"
        },
        {
            "name": "is_string",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "is_string(any $value): boolean",
            "value": "is_string($0)",
            "documentation": "Returns true if the type of value is a string.",
            "link": "[Full documentation]({{ docsurl }}functions.html#is_string)"
        },
        {
            "name": "isset",
            "parameters": {
                "required": [
                    {
                        "name": "x",
                        "type": "variable"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "isset(variable $x): boolean",
            "value": "isset($0)",
            "documentation": "Returns true if the variable is defined.",
            "link": "[Full documentation]({{ docsurl }}functions.html#isset)"
        },
        {
            "name": "unset",
            "parameters": {
                "required": [
                    {
                        "name": "x",
                        "type": "variable"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "unset(variable $x): boolean",
            "value": "unset($0)",
            "documentation": "Unsets the variable or array index or slice of x, it return true if the variable or array index was defined.",
            "link": "[Full documentation]({{ docsurl }}functions.html#unset)"
        },
        {
            "name": "executiontime",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "number",
            "detail": "executiontime(): number",
            "value": "executiontime()",
            "documentation": "Return the elapsed time since the beginning of the code execution.",
            "link": "[Full documentation]({{ docsurl }}functions.html#executiontime)"
        },
        {
            "name": "sleep",
            "parameters": {
                "required": [
                    {
                        "name": "seconds",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "sleep(number $seconds): number",
            "value": "sleep($0)",
            "documentation": "Pause the code execution for x seconds.",
            "link": "[Full documentation]({{ docsurl }}functions.html#sleep)"
        },
        {
            "name": "strftime",
            "parameters": {
                "required": [
                    {
                        "name": "format",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "time",
                        "type": "number"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string",
            "detail": "strftime(string $format [, number $time [, array $options]]): string",
            "value": "strftime($0)",
            "documentation": "Format according to the strftime manual.",
            "link": "[Full documentation]({{ docsurl }}functions.html#strftime)"
        },
        {
            "name": "strptime",
            "parameters": {
                "required": [
                    {
                        "name": "datestring",
                        "type": "string"
                    },
                    {
                        "name": "format",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "number",
            "detail": "strptime(string $datestring, string $format [, array $options]): number",
            "value": "strptime($0)",
            "documentation": "Parse a date string according to the strftime manual with the time without timezone.",
            "link": "[Full documentation]({{ docsurl }}functions.html#strptime)"
        },
        {
            "name": "time",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "number",
            "detail": "time(): number",
            "value": "time()",
            "documentation": "Return elapsed seconds (unix time) since 1970-01-01T00:00:00Z without timezone.",
            "link": "[Full documentation]({{ docsurl }}functions.html#time)"
        },
        {
            "name": "timelocal",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "number",
            "detail": "timelocal(): number",
            "value": "timelocal()",
            "documentation": "Return elapsed seconds (unix time) since 1970-01-01T00:00:00Z with timezone.",
            "link": "[Full documentation]({{ docsurl }}functions.html#timelocal)"
        },
        {
            "name": "uptime",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "number",
            "detail": "uptime(): number",
            "value": "uptime()",
            "documentation": "Return the monotonic time since system boot. Monotonic time is by definition suitable for relative time keeping, in contrast to time(). If you want to obtain the script execution time use executiontime().",
            "link": "[Full documentation]({{ docsurl }}functions.html#uptime)"
        },
        {
            "name": "dns_query",
            "parameters": {
                "required": [
                    {
                        "name": "host",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "dns_query(string $host [, array $options]): array",
            "value": "dns_query($0)",
            "documentation": "Query for DNS records of a hostname.",
            "link": "[Full documentation]({{ docsurl }}functions.html#dns_query)"
        },
        {
            "name": "domain_includes",
            "parameters": {
                "required": [
                    {
                        "name": "subdomain",
                        "type": "string"
                    },
                    {
                        "name": "domain",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "boolean",
            "detail": "domain_includes(string $subdomain, string $domain [, array $options]): boolean",
            "value": "domain_includes($0)",
            "documentation": "Test if subdomain is a subdomain of domain. If the domain starts with a dot . it must be a subdomain of domain, hence it will not even if subdomain == domain.",
            "link": "[Full documentation]({{ docsurl }}functions.html#domain_includes)",
            "aliases": [
                "is_subdomain"
            ]
        },
        {
            "name": "idna_encode",
            "parameters": {
                "required": [
                    {
                        "name": "domain",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "idna_encode(string $domain): string or none",
            "value": "idna_encode($0)",
            "documentation": "IDNA encode a domain (to punycode). On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#idna_encode)"
        },
        {
            "name": "idna_decode",
            "parameters": {
                "required": [
                    {
                        "name": "domain",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "idna_decode(string $domain): string or none",
            "value": "idna_decode($0)",
            "documentation": "IDNA decode a domain (to unicode). On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#idna_decode)"
        },
        {
            "name": "base32_encode",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "base32_encode(string $string): string",
            "value": "base32_encode($0)",
            "documentation": "Base32 encode the string (RFC 4648).",
            "link": "[Full documentation]({{ docsurl }}functions.html#base32_encode)"
        },
        {
            "name": "base32_decode",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "base32_decode(string $string): string",
            "value": "base32_decode($0)",
            "documentation": "Base32 decode the string (RFC 4648).",
            "link": "[Full documentation]({{ docsurl }}functions.html#base32_decode)"
        },
        {
            "name": "base64_encode",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "base64_encode(string $string): string",
            "value": "base64_encode($0)",
            "documentation": "Base64 encode the string.",
            "link": "[Full documentation]({{ docsurl }}functions.html#base64_encode)"
        },
        {
            "name": "base64_decode",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "base64_decode(string $string): string",
            "value": "base64_decode($0)",
            "documentation": "Base64 decode the string.",
            "link": "[Full documentation]({{ docsurl }}functions.html#base64_decode)"
        },
        {
            "name": "csv_encode",
            "parameters": {
                "required": [
                    {
                        "name": "values",
                        "type": "array"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "csv_encode(array $values [, array $options]): array",
            "value": "csv_encode($0)",
            "documentation": "Encode an array of strings as CSV encoded data.",
            "link": "[Full documentation]({{ docsurl }}functions.html#csv_encode)"
        },
        {
            "name": "csv_decode",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array or none",
            "detail": "csv_decode(string $string [, array $options]): array or none",
            "value": "csv_decode($0)",
            "documentation": "Parse CSV data as string. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#csv_decode)"
        },
        {
            "name": "json_encode",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string or none",
            "detail": "json_encode(any $value [, array $options]): string or none",
            "value": "json_encode($0)",
            "documentation": "JSON encode a HSL data type. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#json_encode)"
        },
        {
            "name": "json_decode",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "any or none",
            "detail": "json_decode(string $string [, array $options]): any or none",
            "value": "json_decode($0)",
            "documentation": "Decodes a JSON string into a HSL data type. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#json_decode)"
        },
        {
            "name": "url_encode",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "url_encode(string $string): string",
            "value": "url_encode($0)",
            "documentation": "URL encode the string (RFC 3986).",
            "link": "[Full documentation]({{ docsurl }}functions.html#url_encode)"
        },
        {
            "name": "url_decode",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "url_decode(string $string): string",
            "value": "url_decode($0)",
            "documentation": "URL decode the string (RFC 3986).",
            "link": "[Full documentation]({{ docsurl }}functions.html#url_decode)"
        },
        {
            "name": "yaml_decode",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "any or none",
            "detail": "yaml_decode(string $string): any or none",
            "value": "yaml_decode($0)",
            "documentation": "Decodes a YAML string into a HSL data type. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#yaml_decode)"
        },
        {
            "name": "pack",
            "parameters": {
                "required": [
                    {
                        "name": "format",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "...args",
                        "type": "any"
                    }
                ]
            },
            "returnType": "string or none",
            "detail": "pack(string $format [, any ...$args]): string or none",
            "value": "pack($0)",
            "documentation": "Pack arguments into a binary string. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#pack)"
        },
        {
            "name": "unpack",
            "parameters": {
                "required": [
                    {
                        "name": "format",
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "offset = 0",
                        "type": "number"
                    }
                ]
            },
            "returnType": "array or none",
            "detail": "unpack(string $format, string $data [, number $offset = 0]): array or none",
            "value": "unpack($0)",
            "documentation": "Unpack data from a binary string. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#unpack)"
        },
        {
            "name": "http",
            "parameters": {
                "required": [
                    {
                        "name": "url",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    },
                    {
                        "name": "get",
                        "type": "array"
                    },
                    {
                        "name": "post",
                        "type": "array, string or function"
                    }
                ]
            },
            "returnType": "string, array or none",
            "detail": "http(string $url [, array $options [, array $get [, array, string or function $post]]]): string, array or none",
            "value": "http($0)",
            "documentation": "Make HTTP\/HTTPS request to a URL and return the content.",
            "link": "[Full documentation]({{ docsurl }}functions.html#http)"
        },
        {
            "name": "envelope_address_parse",
            "parameters": {
                "required": [
                    {
                        "name": "address",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "array or none",
            "detail": "envelope_address_parse(string $address): array or none",
            "value": "envelope_address_parse($0)",
            "documentation": "Parse an email address into localpart and domain. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#envelope_address_parse)"
        },
        {
            "name": "envelope_localpart_escape",
            "parameters": {
                "required": [
                    {
                        "name": "address",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "envelope_localpart_escape(string $address): string",
            "value": "envelope_localpart_escape($0)",
            "documentation": "Apply escaping to the an email envelope localpart.",
            "link": "[Full documentation]({{ docsurl }}functions.html#envelope_localpart_escape)"
        },
        {
            "name": "header_addresslist_extract",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array or none",
            "detail": "header_addresslist_extract(string $value [, array $options]): array or none",
            "value": "header_addresslist_extract($0)",
            "documentation": "Extract addresses from a header value or field, often used with From, To and CC headers. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#header_addresslist_extract)",
            "aliases": [
                "GetAddressList"
            ]
        },
        {
            "name": "header_dkim_decode",
            "parameters": {
                "required": [
                    {
                        "name": "value",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array or none",
            "detail": "header_dkim_decode(string $value [, array $options]): array or none",
            "value": "header_dkim_decode($0)",
            "documentation": "Decode a Tag=Value list from a DKIM header value or field, often used with DKIM-Signature or ARC- headers. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#header_dkim_decode)"
        },
        {
            "name": "xtext_encode",
            "parameters": {
                "required": [
                    {
                        "name": "text",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "xtext_encode(string $text): string",
            "value": "xtext_encode($0)",
            "documentation": "Encode xtext according to the rfc1891.",
            "link": "[Full documentation]({{ docsurl }}functions.html#xtext_encode)"
        },
        {
            "name": "xtext_decode",
            "parameters": {
                "required": [
                    {
                        "name": "text",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "xtext_decode(string $text): string",
            "value": "xtext_decode($0)",
            "documentation": "Decode xtext according to the rfc1891.",
            "link": "[Full documentation]({{ docsurl }}functions.html#xtext_decode)"
        },
        {
            "name": "spf_query",
            "parameters": {
                "required": [
                    {
                        "name": "ip",
                        "type": "string"
                    },
                    {
                        "name": "helo",
                        "type": "string"
                    },
                    {
                        "name": "domain",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "spf_query(string $ip, string $helo, string $domain [, array $options]): array",
            "value": "spf_query($0)",
            "documentation": "Check the SPF status of the senderdomain.",
            "link": "[Full documentation]({{ docsurl }}functions.html#spf_query)"
        },
        {
            "name": "abs",
            "parameters": {
                "required": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "abs(number $number): number",
            "value": "abs($0)",
            "documentation": "Return the absolute value of a number.",
            "link": "[Full documentation]({{ docsurl }}functions.html#abs)"
        },
        {
            "name": "ceil",
            "parameters": {
                "required": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "ceil(number $number): number",
            "value": "ceil($0)",
            "documentation": "Return the integer value of a number by rounding up if necessary.",
            "link": "[Full documentation]({{ docsurl }}functions.html#ceil)"
        },
        {
            "name": "floor",
            "parameters": {
                "required": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "floor(number $number): number",
            "value": "floor($0)",
            "documentation": "Return the integer value of a number by rounding down if necessary.",
            "link": "[Full documentation]({{ docsurl }}functions.html#floor)"
        },
        {
            "name": "log",
            "parameters": {
                "required": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "base = e",
                        "type": "number"
                    }
                ]
            },
            "returnType": "number",
            "detail": "log(number $number [, number $base = e]): number",
            "value": "log($0)",
            "documentation": "Return the logarithm of number to base.",
            "link": "[Full documentation]({{ docsurl }}functions.html#log)"
        },
        {
            "name": "pow",
            "parameters": {
                "required": [
                    {
                        "name": "base",
                        "type": "number"
                    },
                    {
                        "name": "exponent",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "pow(number $base, number $exponent): number",
            "value": "pow($0)",
            "documentation": "Return base raised to the power of the exponent.",
            "link": "[Full documentation]({{ docsurl }}functions.html#pow)"
        },
        {
            "name": "round",
            "parameters": {
                "required": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "decimals = 0",
                        "type": "number"
                    }
                ]
            },
            "returnType": "number",
            "detail": "round(number $number [, number $decimals = 0]): number",
            "value": "round($0)",
            "documentation": "Return number rounded to precision of decimals.",
            "link": "[Full documentation]({{ docsurl }}functions.html#round)"
        },
        {
            "name": "sqrt",
            "parameters": {
                "required": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "sqrt(number $number): number",
            "value": "sqrt($0)",
            "documentation": "Return the square root of number.",
            "link": "[Full documentation]({{ docsurl }}functions.html#sqrt)"
        },
        {
            "name": "serial",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "string",
            "detail": "serial(): string",
            "value": "serial()",
            "documentation": "The serial number of the installation. It can be used to identify a software instance.\n                        This function is only available in the full system distribution (virtual machine) package.",
            "link": "[Full documentation]({{ docsurl }}functions.html#serial)"
        },
        {
            "name": "gethostname",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "string",
            "detail": "gethostname(): string",
            "value": "gethostname()",
            "documentation": "The hostname of the installation, this can be used to identify a software instance.",
            "link": "[Full documentation]({{ docsurl }}functions.html#gethostname)"
        },
        {
            "name": "uuid",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "string",
            "detail": "uuid(): string",
            "value": "uuid()",
            "documentation": "Return a unique ID.",
            "link": "[Full documentation]({{ docsurl }}functions.html#uuid)"
        },
        {
            "name": "syslog",
            "parameters": {
                "required": [
                    {
                        "name": "priority",
                        "type": "string or number"
                    },
                    {
                        "name": "message",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "syslog(string or number $priority, string $message): none",
            "value": "syslog($0)",
            "documentation": "The syslog function complements the echo statement by allowing messages with custom priorities to be logged.",
            "link": "[Full documentation]({{ docsurl }}functions.html#syslog)"
        },
        {
            "name": "stat",
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "legends",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "stat(string $name, array $legends): none",
            "value": "stat($0)",
            "documentation": "Collect statistics based on one or more legend (value).\n                        This function is only available in the full system distribution (virtual machine) package.\n                        Connectors for external time-series databases such as Graphite or InfluxDB\n                        are available in the script library.",
            "link": "[Full documentation]({{ docsurl }}functions.html#stat)"
        },
        {
            "name": "inet_includes",
            "parameters": {
                "required": [
                    {
                        "name": "ip",
                        "type": "string"
                    },
                    {
                        "name": "network",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean or none",
            "detail": "inet_includes(string $ip, string $network): boolean or none",
            "value": "inet_includes($0)",
            "documentation": "Returns true if ip is in the subnet or range of network. Both IPv4 and IPv6 are supported (comparison between different protocols always yields false). On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#inet_includes)",
            "aliases": [
                "in_network"
            ]
        },
        {
            "name": "inet_ntop",
            "parameters": {
                "required": [
                    {
                        "name": "ip",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "inet_ntop(string $ip): string or none",
            "value": "inet_ntop($0)",
            "documentation": "Converts an IP from a binary string format (4 char for IPv4 and 16 char for IPv6) to a printable string format (eg 10.0.0.1). On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#inet_ntop)"
        },
        {
            "name": "inet_pton",
            "parameters": {
                "required": [
                    {
                        "name": "ip",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "inet_pton(string $ip): string or none",
            "value": "inet_pton($0)",
            "documentation": "Converts an IP from printable string format (eg 10.0.0.1) to a binary string format (4 char for IPv4 and 16 char for IPv6). On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#inet_pton)"
        },
        {
            "name": "inet_reverse",
            "parameters": {
                "required": [
                    {
                        "name": "ip",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "zone",
                        "type": "string"
                    }
                ]
            },
            "returnType": "string or none",
            "detail": "inet_reverse(string $ip [, string $zone]): string or none",
            "value": "inet_reverse($0)",
            "documentation": "Converts an IPv4 or IPv6 to a reverse DNS compatible format (to be used with PTR lookups or DNSxL lookups). By default the zone correspons to the ARPA address for each IP family. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#inet_reverse)"
        },
        {
            "name": "rate",
            "parameters": {
                "required": [
                    {
                        "name": "namespace",
                        "type": "string"
                    },
                    {
                        "name": "entry",
                        "type": "string"
                    },
                    {
                        "name": "count",
                        "type": "number"
                    },
                    {
                        "name": "interval",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "number or none",
            "detail": "rate(string $namespace, string $entry, number $count, number $interval [, array $options]): number or none",
            "value": "rate($0)",
            "documentation": "Check or account for the rate of entry in namespace during the last interval. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#rate)"
        },
        {
            "name": "mail",
            "parameters": {
                "required": [
                    {
                        "name": "sender",
                        "type": "string or array"
                    },
                    {
                        "name": "recipient",
                        "type": "string or array"
                    },
                    {
                        "name": "subject",
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "type": "string"
                    },
                    {
                        "name": "transportid",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "string",
            "detail": "mail(string or array $sender, string or array $recipient, string $subject, string $body, string $transportid [, array $options]): string",
            "value": "mail($0)",
            "documentation": "Put an email message into the queue.",
            "link": "[Full documentation]({{ docsurl }}functions.html#mail)"
        },
        {
            "name": "smtp_lookup_rcpt",
            "parameters": {
                "required": [
                    {
                        "name": "server",
                        "type": "string or array"
                    },
                    {
                        "name": "sender",
                        "type": "string or array"
                    },
                    {
                        "name": "recipient",
                        "type": "string or array"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "number or array",
            "detail": "smtp_lookup_rcpt(string or array $server, string or array $sender, string or array $recipient [, array $options]): number or array",
            "value": "smtp_lookup_rcpt($0)",
            "documentation": "Check if sender is allowed to send mail to recipient.",
            "link": "[Full documentation]({{ docsurl }}functions.html#smtp_lookup_rcpt)"
        },
        {
            "name": "smtp_lookup_auth",
            "parameters": {
                "required": [
                    {
                        "name": "server",
                        "type": "string or array"
                    },
                    {
                        "name": "username",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "smtp_lookup_auth(string or array $server, string $username, string $password): number",
            "value": "smtp_lookup_auth($0)",
            "documentation": "Try to authenticate the username against a SMTP server.",
            "link": "[Full documentation]({{ docsurl }}functions.html#smtp_lookup_auth)"
        },
        {
            "name": "chr",
            "parameters": {
                "required": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "chr(number $number): string",
            "value": "chr($0)",
            "documentation": "Returns ASCII character from a number. This function complements ord().",
            "link": "[Full documentation]({{ docsurl }}functions.html#chr)"
        },
        {
            "name": "ord",
            "parameters": {
                "required": [
                    {
                        "name": "character",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "ord(string $character): number",
            "value": "ord($0)",
            "documentation": "Return ASCII value of a character. This function complements chr().",
            "link": "[Full documentation]({{ docsurl }}functions.html#ord)"
        },
        {
            "name": "str_repeat",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "multiplier",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "str_repeat(string $string, number $multiplier): string",
            "value": "str_repeat($0)",
            "documentation": "Returns the string repeated multiplier times.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_repeat)"
        },
        {
            "name": "str_replace",
            "parameters": {
                "required": [
                    {
                        "name": "search",
                        "type": "string"
                    },
                    {
                        "name": "replace",
                        "type": "string"
                    },
                    {
                        "name": "subject",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "str_replace(string $search, string $replace, string $subject): string",
            "value": "str_replace($0)",
            "documentation": "Returns the string subject with the string search replace with replace.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_replace)"
        },
        {
            "name": "str_split",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "delimiter",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "limit = 0",
                        "type": "number"
                    }
                ]
            },
            "returnType": "array",
            "detail": "str_split(string $string, string $delimiter [, number $limit = 0]): array",
            "value": "str_split($0)",
            "documentation": "Splits the string into an array on the delimiter.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_split)"
        },
        {
            "name": "str_find",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "substring",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "offset = 0",
                        "type": "number"
                    }
                ]
            },
            "returnType": "number",
            "detail": "str_find(string $string, string $substring [, number $offset = 0]): number",
            "value": "str_find($0)",
            "documentation": "Return the position (starting from zero) of the first occurrence of substring in the string (starting from the offset). If the substring is not found -1 is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_find)",
            "aliases": [
                "strpos"
            ]
        },
        {
            "name": "str_rfind",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "substring",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "offset = 0",
                        "type": "number"
                    }
                ]
            },
            "returnType": "number",
            "detail": "str_rfind(string $string, string $substring [, number $offset = 0]): number",
            "value": "str_rfind($0)",
            "documentation": "Return the position (starting from zero) of the last occurrence of substring in the string searching backward (starting from the offset relative to the end). If the substring is not found -1 is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_rfind)",
            "aliases": [
                "strrpos"
            ]
        },
        {
            "name": "str_lower",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "str_lower(string $string): string",
            "value": "str_lower($0)",
            "documentation": "Returns string with all US-ASCII character to lowercased.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_lower)",
            "aliases": [
                "strtolower"
            ]
        },
        {
            "name": "str_upper",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "str_upper(string $string): string",
            "value": "str_upper($0)",
            "documentation": "Returns string with all US-ASCII character uppercased.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_upper)",
            "aliases": [
                "strtoupper"
            ]
        },
        {
            "name": "str_slice",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "length",
                        "type": "number"
                    }
                ]
            },
            "returnType": "string",
            "detail": "str_slice(string $string, number $offset [, number $length]): string",
            "value": "str_slice($0)",
            "documentation": "Return the substring of string.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_slice)",
            "aliases": [
                "substr"
            ]
        },
        {
            "name": "str_strip",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "characters",
                        "type": "string"
                    }
                ]
            },
            "returnType": "string",
            "detail": "str_strip(string $string [, string $characters]): string",
            "value": "str_strip($0)",
            "documentation": "Returns string with whitespace strip characters (\\s\\t\\r\\n) removed from the start and end of the string.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_strip)",
            "aliases": [
                "trim"
            ]
        },
        {
            "name": "str_lstrip",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "characters",
                        "type": "string"
                    }
                ]
            },
            "returnType": "string",
            "detail": "str_lstrip(string $string [, string $characters]): string",
            "value": "str_lstrip($0)",
            "documentation": "Returns string with whitespace strip characters (\\s\\t\\r\\n) removed from the start of the string.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_lstrip)"
        },
        {
            "name": "str_rstrip",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "characters",
                        "type": "string"
                    }
                ]
            },
            "returnType": "string",
            "detail": "str_rstrip(string $string [, string $characters]): string",
            "value": "str_rstrip($0)",
            "documentation": "Returns string with whitespace strip characters (\\s\\t\\r\\n) removed from the end of the string.",
            "link": "[Full documentation]({{ docsurl }}functions.html#str_rstrip)"
        },
        {
            "name": "pcre_match",
            "parameters": {
                "required": [
                    {
                        "name": "pattern",
                        "type": "Regex, string"
                    },
                    {
                        "name": "subject",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "pcre_match(Regex, string $pattern, string $subject): array",
            "value": "pcre_match($0)",
            "documentation": "PCRE matching in subject.",
            "link": "[Full documentation]({{ docsurl }}functions.html#pcre_match)"
        },
        {
            "name": "pcre_match_all",
            "parameters": {
                "required": [
                    {
                        "name": "pattern",
                        "type": "Regex, string"
                    },
                    {
                        "name": "subject",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "pcre_match_all(Regex, string $pattern, string $subject): array",
            "value": "pcre_match_all($0)",
            "documentation": "The implementation is identical to pcre_match() except the return type.",
            "link": "[Full documentation]({{ docsurl }}functions.html#pcre_match_all)"
        },
        {
            "name": "pcre_quote",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "pcre_quote(string $string): string",
            "value": "pcre_quote($0)",
            "documentation": "Quote all metacharacters which has special meaning in a regular expression.",
            "link": "[Full documentation]({{ docsurl }}functions.html#pcre_quote)"
        },
        {
            "name": "pcre_compile",
            "parameters": {
                "required": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "Regex",
            "detail": "pcre_compile(string $string): Regex",
            "value": "pcre_compile($0)",
            "documentation": "Pre-compile a regex to a regular expression object.",
            "link": "[Full documentation]({{ docsurl }}functions.html#pcre_compile)"
        },
        {
            "name": "pcre_replace",
            "parameters": {
                "required": [
                    {
                        "name": "pattern",
                        "type": "Regex, string"
                    },
                    {
                        "name": "replace",
                        "type": "function, string"
                    },
                    {
                        "name": "subject",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "limit = 0",
                        "type": "number"
                    }
                ]
            },
            "returnType": "string",
            "detail": "pcre_replace(Regex, string $pattern, function, string $replace, string $subject [, number $limit = 0]): string",
            "value": "pcre_replace($0)",
            "documentation": "Perl compatible regular expression data matching and replacing.",
            "link": "[Full documentation]({{ docsurl }}functions.html#pcre_replace)"
        },
        {
            "name": "FFIFunction",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "FFIValue or none (for void or a pointer returning NULL)",
            "detail": "FFIFunction(): FFIValue or none (for void or a pointer returning NULL)",
            "value": "FFIFunction()",
            "documentation": "A callable Function object of type FFIFunction.",
            "link": "[Full documentation]({{ docsurl }}functions.html#FFIFunction)"
        },
        {
            "name": "memory_add",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": []
            },
            "returnType": "boolean",
            "detail": "memory_add(string $key, any $value): boolean",
            "value": "memory_add($0)",
            "documentation": "Adds the value to the store, but only if the key doesn't already exist.",
            "link": "[Full documentation]({{ docsurl }}functions.html#memory_add)"
        },
        {
            "name": "memory_dec",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "number or none",
            "detail": "memory_dec(string $key): number or none",
            "value": "memory_dec($0)",
            "documentation": "Decrements a number value in the store. If the key doesn't exist, it's created and the value is initialized to 0 before the decrement. If the value is not a number, this function fail and will return none.",
            "link": "[Full documentation]({{ docsurl }}functions.html#memory_dec)"
        },
        {
            "name": "memory_delete",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "callback",
                        "type": "function"
                    }
                ]
            },
            "returnType": "boolean",
            "detail": "memory_delete(string $key [, function $callback]): boolean",
            "value": "memory_delete($0)",
            "documentation": "Deletes a key from the store. If the key existed, the callback (if provided) will be called with the key and value as arguments.",
            "link": "[Full documentation]({{ docsurl }}functions.html#memory_delete)"
        },
        {
            "name": "memory_exists",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "callback",
                        "type": "function"
                    }
                ]
            },
            "returnType": "boolean",
            "detail": "memory_exists(string $key [, function $callback]): boolean",
            "value": "memory_exists($0)",
            "documentation": "Checks if a key in the store exists. If the key exists the callback (if provided) will be called with the key and value as arguments.",
            "link": "[Full documentation]({{ docsurl }}functions.html#memory_exists)"
        },
        {
            "name": "memory_fetch",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "callback",
                        "type": "function"
                    }
                ]
            },
            "returnType": "any",
            "detail": "memory_fetch(string $key [, function $callback]): any",
            "value": "memory_fetch($0)",
            "documentation": "Returns the value of a key in the store. If the entry doesn't exist and no callback is provided, none will be returned. If the entry doesn't exist and a callback is provided, it will be called with the key as argument, and the return value of the callback will be used as return value for this function.",
            "link": "[Full documentation]({{ docsurl }}functions.html#memory_fetch)"
        },
        {
            "name": "memory_inc",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "number or none",
            "detail": "memory_inc(string $key): number or none",
            "value": "memory_inc($0)",
            "documentation": "Increments a number value in the store. If the key doesn't exist, it's created and the value is initialized to 0 before the increment. If the value is not a number, this function fail and will return none.",
            "link": "[Full documentation]({{ docsurl }}functions.html#memory_inc)"
        },
        {
            "name": "memory_store",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "optional": [
                    {
                        "name": "callback",
                        "type": "function"
                    }
                ]
            },
            "returnType": "boolean",
            "detail": "memory_store(string $key, any $value [, function $callback]): boolean",
            "value": "memory_store($0)",
            "documentation": "Update or create the value of key in the store. If the key exists, the callback (if provided) will be called with the key and the current value as arguments in order to know what value was overwritten.",
            "link": "[Full documentation]({{ docsurl }}functions.html#memory_store)"
        },
        {
            "name": "memory_update",
            "parameters": {
                "required": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "any"
                    },
                    {
                        "name": "callback",
                        "type": "function"
                    }
                ],
                "optional": [
                    {
                        "name": "initial",
                        "type": "any"
                    }
                ]
            },
            "returnType": "boolean",
            "detail": "memory_update(string $key, any $value, function $callback [, any $initial]): boolean",
            "value": "memory_update($0)",
            "documentation": "Update the value of key in the store, if it exists. The return value of the callback function (called with the key, current value and value as argument) will be used as the stored value.",
            "link": "[Full documentation]({{ docsurl }}functions.html#memory_update)"
        },
        {
            "name": "queue_suspend",
            "parameters": {
                "required": [
                    {
                        "name": "fields",
                        "type": "array"
                    },
                    {
                        "name": "ttl",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "queue_suspend(array $fields, number $ttl [, array $options]): array",
            "value": "queue_suspend($0)",
            "documentation": "Add a dynamic queue pickup suspend for the following fields, this will cause no more messages matching this condition to be picked up for delivery during the ttl of the suspend. If a matching suspend already exists only the TTL is updated. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#queue_suspend)"
        },
        {
            "name": "queue_policy",
            "parameters": {
                "required": [
                    {
                        "name": "fields",
                        "type": "array"
                    },
                    {
                        "name": "condition",
                        "type": "array"
                    },
                    {
                        "name": "policy",
                        "type": "array"
                    },
                    {
                        "name": "ttl",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "queue_policy(array $fields, array $condition, array $policy, number $ttl [, array $options]): array",
            "value": "queue_policy($0)",
            "documentation": "Add a dynamic queue pickup policy for the specific fields, matching a specific condition. If a matching policy (fields and condition) already exists the condition and TTL is updated. On error none is returned.",
            "link": "[Full documentation]({{ docsurl }}functions.html#queue_policy)"
        },
        {
            "name": "queue_quota",
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "queue_quota(string $name): array",
            "value": "queue_quota($0)",
            "documentation": "Get the usage for a specific quota. Messages may be assigned to one or more quotas when calling eg. eodonce.EODMailMessage.queue() which is then incremented accordingly. When the messages is removed from the queue (delivered or not) the quota is decremented.",
            "link": "[Full documentation]({{ docsurl }}functions.html#queue_quota)"
        },
        {
            "name": "ldap_search",
            "deprecated": true,
            "parameters": {
                "required": [
                    {
                        "name": "profile",
                        "type": "string"
                    },
                    {
                        "name": "lookup",
                        "type": "any"
                    }
                ],
                "optional": [
                    {
                        "name": "override",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array or number",
            "detail": "ldap_search(string $profile, any $lookup [, array $override]): array or number",
            "value": "ldap_search($0)",
            "documentation": "Query an LDAP server for lookup and return all LDAP entries found.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/functions.html#ldap_search)"
        },
        {
            "name": "ldap_bind",
            "deprecated": true,
            "parameters": {
                "required": [
                    {
                        "name": "profile",
                        "type": "string"
                    },
                    {
                        "name": "username",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "override",
                        "type": "array"
                    }
                ]
            },
            "returnType": "number",
            "detail": "ldap_bind(string $profile, string $username, string $password [, array $override]): number",
            "value": "ldap_bind($0)",
            "documentation": "Try to bind (authenticate) against an LDAP server.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/functions.html#ldap_bind)"
        },
        {
            "name": "file",
            "deprecated": true,
            "parameters": {
                "required": [
                    {
                        "name": "filename",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "array",
            "detail": "file(string $filename): array",
            "value": "file($0)",
            "documentation": "Return the content of the filename as an array line by line (without CR\/LF).",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/functions.html#file)"
        },
        {
            "name": "in_file",
            "deprecated": true,
            "parameters": {
                "required": [
                    {
                        "name": "needle",
                        "type": "any"
                    },
                    {
                        "name": "filename",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "in_file(any $needle, string $filename [, array $options]): array",
            "value": "in_file($0)",
            "documentation": "Searches for a needle at the beginning (or at index) of each line in filename. If found, the line is returned as an array separated by the delimiter.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/functions.html#in_file)"
        },
        {
            "name": "file_get_contents",
            "deprecated": true,
            "parameters": {
                "required": [
                    {
                        "name": "filename",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "file_get_contents(string $filename): string",
            "value": "file_get_contents($0)",
            "documentation": "Return the content of the filename as a string.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/functions.html#file_get_contents)"
        },
        {
            "name": "dnsbl",
            "deprecated": true,
            "parameters": {
                "required": [
                    {
                        "name": "ip",
                        "type": "string"
                    },
                    {
                        "name": "hostname",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "resolvers",
                        "type": "array"
                    },
                    {
                        "name": "timeout = 5",
                        "type": "number"
                    }
                ]
            },
            "returnType": "array",
            "detail": "dnsbl(string $ip, string $hostname [, array $resolvers [, number $timeout = 5]]): array",
            "value": "dnsbl($0)",
            "documentation": "Query the resolvers for the DNSBL status of an address. If no resolvers are given, the system default is used.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.2-stable\/functions.html#dnsbl)"
        },
        {
            "name": "globalview",
            "parameters": {
                "required": [
                    {
                        "name": "ip",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string",
            "detail": "globalview(string $ip): string",
            "value": "globalview($0)",
            "documentation": "Query the embedded Cyren IP reputation, ctipd.",
            "link": "[Full documentation]({{ docsurl }}integrations.html#globalview)"
        }
    ],
    "connect": [
        {
            "name": "Accept",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Accept([array $options])",
            "value": "Accept($0)",
            "documentation": "Allow the connection to be established.\n                        Optionally change the remoteip and PTR of the accepted client connection, which is written back to the $connection variable.",
            "link": "[Full documentation]({{ docsurl }}connect.html#Accept)"
        },
        {
            "name": "Reject",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reject([string or array $reason [, array $options]])",
            "value": "Reject($0)",
            "documentation": "Close the connection with a permanent (521) error.",
            "link": "[Full documentation]({{ docsurl }}connect.html#Reject)"
        },
        {
            "name": "Defer",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Defer([string or array $reason [, array $options]])",
            "value": "Defer($0)",
            "documentation": "Close the connection with a temporary (421) error.",
            "link": "[Full documentation]({{ docsurl }}connect.html#Defer)"
        },
        {
            "name": "SetSenderIP",
            "deprecated": true,
            "parameters": {
                "required": [
                    {
                        "name": "senderip",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "SetSenderIP(string $senderip): string or none",
            "value": "SetSenderIP($0)",
            "documentation": "Change the senderip for the current connection.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/connect.html#SetSenderIP)"
        }
    ],
    "disconnect": [
        {
            "name": "Pass",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Pass()",
            "value": "Pass()",
            "documentation": "Terminate the disconnect script.",
            "link": "[Full documentation]({{ docsurl }}disconnect.html#Pass)"
        }
    ],
    "proxy": [
        {
            "name": "Pass",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Pass([array $options])",
            "value": "Pass($0)",
            "documentation": "Pass the command to the SMTP server's state machine.",
            "link": "[Full documentation]({{ docsurl }}proxy.html#Pass)"
        },
        {
            "name": "Reply",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reply([string or array $reason [, array $options]])",
            "value": "Reply($0)",
            "documentation": "Send a reply to the client (The default is code 250). The command is not passed to the SMTP server's state machine.",
            "link": "[Full documentation]({{ docsurl }}proxy.html#Reply)"
        }
    ],
    "helo": [
        {
            "name": "Accept",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Accept([array $options])",
            "value": "Accept($0)",
            "documentation": "Accept the HELO or EHLO command. Optionally change the host of the sending client, which is written back to the $connection variable.",
            "link": "[Full documentation]({{ docsurl }}helo.html#Accept)"
        },
        {
            "name": "Reject",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reject([string or array $reason [, array $options]])",
            "value": "Reject($0)",
            "documentation": "Reject the HELO or EHLO command with a permanent (554) error.",
            "link": "[Full documentation]({{ docsurl }}helo.html#Reject)"
        },
        {
            "name": "Defer",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Defer([string or array $reason [, array $options]])",
            "value": "Defer($0)",
            "documentation": "Defer the HELO or EHLO command with a temporary (450) error.",
            "link": "[Full documentation]({{ docsurl }}helo.html#Defer)"
        },
        {
            "name": "GetExtensions",
            "deprecated": true,
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "array",
            "detail": "GetExtensions(): array",
            "value": "GetExtensions()",
            "documentation": "Return the current SMTP service extensions to be sent if the EHLO command was issued.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.0-stable\/helo.html#GetExtensions)"
        },
        {
            "name": "GetTLS",
            "deprecated": true,
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "GetTLS([array $options]): array",
            "value": "GetTLS($0)",
            "documentation": "Get the TLS information for a connection.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.0-stable\/helo.html#GetTLS)"
        },
        {
            "name": "SetHELO",
            "deprecated": true,
            "parameters": {
                "required": [
                    {
                        "name": "senderhelo",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "SetHELO(string $senderhelo): string or none",
            "value": "SetHELO($0)",
            "documentation": "Change the HELO hostname for the current connection.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/helo.html#SetHELO)"
        }
    ],
    "auth": [
        {
            "name": "Accept",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Accept([array $options])",
            "value": "Accept($0)",
            "documentation": "Authorize the login request.",
            "link": "[Full documentation]({{ docsurl }}auth.html#Accept)"
        },
        {
            "name": "Reject",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reject([string or array $reason [, array $options]])",
            "value": "Reject($0)",
            "documentation": "Reject the login request with a permanent (535) error.",
            "link": "[Full documentation]({{ docsurl }}auth.html#Reject)"
        },
        {
            "name": "Defer",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Defer([string or array $reason [, array $options]])",
            "value": "Defer($0)",
            "documentation": "Defer the login request with a temporary (454) error.",
            "link": "[Full documentation]({{ docsurl }}auth.html#Defer)"
        },
        {
            "name": "Reply",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reply",
                        "type": "string"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reply([string $reply [, array $options]])",
            "value": "Reply($0)",
            "documentation": "Send a reply (334) message. The reply will be base64 encoded before sent to the client. This function is used to implement custom authentication mechanisms.",
            "link": "[Full documentation]({{ docsurl }}auth.html#Reply)"
        },
        {
            "name": "GetTLS",
            "deprecated": true,
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "GetTLS([array $options]): array",
            "value": "GetTLS($0)",
            "documentation": "Get the TLS information for a connection.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.0-stable\/auth.html#GetTLS)"
        }
    ],
    "mailfrom": [
        {
            "name": "Accept",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Accept([array $options])",
            "value": "Accept($0)",
            "documentation": "Accept the MAIL FROM command (sender).\n                        Optionally change the sender accepted, which is written back to $transaction.",
            "link": "[Full documentation]({{ docsurl }}mailfrom.html#Accept)"
        },
        {
            "name": "Reject",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reject([string or array $reason [, array $options]])",
            "value": "Reject($0)",
            "documentation": "Reject the MAIL FROM command (sender) with a permanent (554) error.",
            "link": "[Full documentation]({{ docsurl }}mailfrom.html#Reject)"
        },
        {
            "name": "Defer",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Defer([string or array $reason [, array $options]])",
            "value": "Defer($0)",
            "documentation": "Defer the MAIL FROM command (sender) with a temporary (450) error.",
            "link": "[Full documentation]({{ docsurl }}mailfrom.html#Defer)"
        },
        {
            "name": "GetTLS",
            "deprecated": true,
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "GetTLS([array $options]): array",
            "value": "GetTLS($0)",
            "documentation": "Get the TLS information for a connection.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.0-stable\/mailfrom.html#GetTLS)"
        },
        {
            "name": "SetSender",
            "compat": 1,
            "parameters": {
                "required": [
                    {
                        "name": "sender",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "SetSender(string $sender): string or none",
            "value": "SetSender($0)",
            "documentation": "Change the sender of the message.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/mailfrom.html#SetSender)"
        }
    ],
    "rcptto": [
        {
            "name": "Accept",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Accept([array $options])",
            "value": "Accept($0)",
            "documentation": "Accept the RCPT TO command (recipient).\n                        Optionally change the recipient accepted and its transport, which is written back to $transaction for subsequent executions.",
            "link": "[Full documentation]({{ docsurl }}rcptto.html#Accept)"
        },
        {
            "name": "Reject",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reject([string or array $reason [, array $options]])",
            "value": "Reject($0)",
            "documentation": "Reject the RCPT TO command (recipient) with a permanent (554) error.",
            "link": "[Full documentation]({{ docsurl }}rcptto.html#Reject)"
        },
        {
            "name": "Defer",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Defer([string or array $reason [, array $options]])",
            "value": "Defer($0)",
            "documentation": "Defer the RCPT TO command (recipient) with a temporary (450) error.",
            "link": "[Full documentation]({{ docsurl }}rcptto.html#Defer)"
        },
        {
            "name": "GetTLS",
            "deprecated": true,
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "GetTLS([array $options]): array",
            "value": "GetTLS($0)",
            "documentation": "Get the TLS information for a connection.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/rcptto.html#GetTLS)"
        },
        {
            "name": "SetSender",
            "compat": 1,
            "parameters": {
                "required": [
                    {
                        "name": "sender",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "SetSender(string $sender): string or none",
            "value": "SetSender($0)",
            "documentation": "Change the sender of the message.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/rcptto.html#SetSender)"
        },
        {
            "name": "SetRecipient",
            "compat": 1,
            "parameters": {
                "required": [
                    {
                        "name": "recipient",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "SetRecipient(string $recipient): string or none",
            "value": "SetRecipient($0)",
            "documentation": "Changes the recipient.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/4.8-stable\/rcptto.html#SetRecipient)"
        }
    ],
    "eodonce": [
        {
            "name": "Accept",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Accept()",
            "value": "Accept()",
            "documentation": "Accept the DATA command (mail data).",
            "link": "[Full documentation]({{ docsurl }}eodonce.html#Accept)"
        },
        {
            "name": "Reject",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reject([string or array $reason [, array $options]])",
            "value": "Reject($0)",
            "documentation": "Reject (550) a message.",
            "link": "[Full documentation]({{ docsurl }}eodonce.html#Reject)"
        },
        {
            "name": "Defer",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Defer([string or array $reason [, array $options]])",
            "value": "Defer($0)",
            "documentation": "Defer (421) a message.",
            "link": "[Full documentation]({{ docsurl }}eodonce.html#Defer)"
        },
        {
            "name": "History",
            "parameters": {
                "required": [
                    {
                        "name": "action",
                        "type": "string"
                    },
                    {
                        "name": "recipient",
                        "type": "string or array"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "boolean or none",
            "detail": "History(string $action, string or array $recipient [, array $options]): boolean or none",
            "value": "History($0)",
            "documentation": "Add an entry to the history database table.\n                            This function is only available in the full system distribution (virtual machine) package.\n                            For long-term logging in high volume systems, remote logging to an external database such as Elasticsearch is recommended.",
            "link": "[Full documentation]({{ docsurl }}eodonce.html#History)"
        },
        {
            "name": "ScanDMARC",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array or string",
            "detail": "ScanDMARC([array $options]): array or string",
            "value": "ScanDMARC($0)",
            "documentation": "Returns the DMARC policy to apply to the message for the From-address. It will return an associative array containing the domain as result. If the domain cannot be properly extracted or missing an error message will be returned.",
            "link": "[Full documentation]({{ docsurl }}eodonce.html#ScanDMARC)"
        },
        {
            "name": "ScanDLP",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "patterns",
                        "type": "array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "ScanDLP([array $patterns [, array $options]]): array",
            "value": "ScanDLP($0)",
            "documentation": "Scan a message using the builtin DLP engine.",
            "link": "[Full documentation]({{ docsurl }}eodonce.html#ScanDLP)"
        },
        {
            "name": "ScanRPD",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "number, string or array",
            "detail": "ScanRPD([array $options]): number, string or array",
            "value": "ScanRPD($0)",
            "documentation": "Scan the message using Cyren; anti-spam ctasd (RPD and LocalView) and zero-hour malware detection (VOD). It runs in either inbound or outbound mode, and it's important to configure this correctly with the outbound option.",
            "link": "[Full documentation]({{ docsurl }}integrations.html#ScanRPD)"
        },
        {
            "name": "ScanSA",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "number or array",
            "detail": "ScanSA([array $options]): number or array",
            "value": "ScanSA($0)",
            "documentation": "Scan the message using SpamAssassin.",
            "link": "[Full documentation]({{ docsurl }}integrations.html#ScanSA)"
        },
        {
            "name": "ScanKAV",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "ScanKAV([array $options]): array",
            "value": "ScanKAV($0)",
            "documentation": "Scan the message using the Sophos anti-virus.",
            "link": "[Full documentation]({{ docsurl }}integrations.html#ScanKAV)"
        },
        {
            "name": "ScanCLAM",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "ScanCLAM([array $options]): array",
            "value": "ScanCLAM($0)",
            "documentation": "Scan the message using ClamAV anti-virus.",
            "link": "[Full documentation]({{ docsurl }}integrations.html#ScanCLAM)"
        }
    ],
    "eodrcpt": [
        {
            "name": "Deliver",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Deliver([array $options])",
            "value": "Deliver($0)",
            "documentation": "Queue or deliver the message.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#Deliver)"
        },
        {
            "name": "Reject",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reject([string or array $reason [, array $options]])",
            "value": "Reject($0)",
            "documentation": "Reject (550) a message.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#Reject)"
        },
        {
            "name": "Defer",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "reason",
                        "type": "string or array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Defer([string or array $reason [, array $options]])",
            "value": "Defer($0)",
            "documentation": "Defer (421) a message.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#Defer)"
        },
        {
            "name": "Delete",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Delete()",
            "value": "Delete()",
            "documentation": "Delete the message (and return 250).",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#Delete)"
        },
        {
            "name": "Quarantine",
            "parameters": {
                "required": [
                    {
                        "name": "quarantineid",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Quarantine(string $quarantineid [, array $options])",
            "value": "Quarantine($0)",
            "documentation": "Quarantine or archive the message, by putting it in the hold queue.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#Quarantine)"
        },
        {
            "name": "Done",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Done()",
            "value": "Done()",
            "documentation": "Finishes the execution of the current recipient without doing an additional action. If a message is scanned without any action, it will be deferred.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#Done)"
        },
        {
            "name": "GetMailMessage",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "MailMessage",
            "detail": "GetMailMessage(): MailMessage",
            "value": "GetMailMessage()",
            "documentation": "This is a \"factory function\" which returns a MailMessage object reference to the DATA (message) received as the result of the End-of-DATA command.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#GetMailMessage)"
        },
        {
            "name": "ScanDMARC",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array or string",
            "detail": "ScanDMARC([array $options]): array or string",
            "value": "ScanDMARC($0)",
            "documentation": "Returns the DMARC policy to apply to the message for the From-address. It will return an associative array containing the domain as result. If the domain cannot be properly extracted or missing an error message will be returned.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#ScanDMARC)"
        },
        {
            "name": "ScanDLP",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "patterns",
                        "type": "array"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "ScanDLP([array $patterns [, array $options]]): array",
            "value": "ScanDLP($0)",
            "documentation": "Scan a message using the builtin DLP engine.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#ScanDLP)"
        },
        {
            "name": "GetTLS",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "GetTLS([array $options]): array",
            "value": "GetTLS($0)",
            "documentation": "Get the TLS information for a connection.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#GetTLS)"
        },
        {
            "name": "SetRecipient",
            "parameters": {
                "required": [
                    {
                        "name": "recipient",
                        "type": "string or array"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "SetRecipient(string or array $recipient): string or none",
            "value": "SetRecipient($0)",
            "documentation": "Changes the recipient.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#SetRecipient)"
        },
        {
            "name": "SetMailTransport",
            "parameters": {
                "required": [
                    {
                        "name": "id",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetMailTransport(string $id): none",
            "value": "SetMailTransport($0)",
            "documentation": "Changes the transport profile.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#SetMailTransport)"
        },
        {
            "name": "SetDelayedDeliver",
            "parameters": {
                "required": [
                    {
                        "name": "delay",
                        "type": "number"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetDelayedDeliver(number $delay): none",
            "value": "SetDelayedDeliver($0)",
            "documentation": "If the message is queued, the first delivery attempt is delayed.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#SetDelayedDeliver)"
        },
        {
            "name": "SetMetaData",
            "parameters": {
                "required": [
                    {
                        "name": "metadata",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetMetaData(array $metadata): none",
            "value": "SetMetaData($0)",
            "documentation": "Set the metadata for the the current, and subsequent, recipient(s). The metadata must be an array with both string keys and values.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#SetMetaData)"
        },
        {
            "name": "GetMetaData",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "array",
            "detail": "GetMetaData(): array",
            "value": "GetMetaData()",
            "documentation": "Get the metadata set by SetMetaData(). If no data was set, an empty array is returned.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#GetMetaData)"
        },
        {
            "name": "SetSender",
            "parameters": {
                "required": [
                    {
                        "name": "sender",
                        "type": "string or array"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "SetSender(string or array $sender): string or none",
            "value": "SetSender($0)",
            "documentation": "Change the sender.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#SetSender)"
        },
        {
            "name": "SetSenderIP",
            "parameters": {
                "required": [
                    {
                        "name": "ip",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "SetSenderIP(string $ip): string or none",
            "value": "SetSenderIP($0)",
            "documentation": "Change the connecting client's IP.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#SetSenderIP)"
        },
        {
            "name": "SetSenderHELO",
            "parameters": {
                "required": [
                    {
                        "name": "hostname",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "string or none",
            "detail": "SetSenderHELO(string $hostname): string or none",
            "value": "SetSenderHELO($0)",
            "documentation": "Change the connecting client's HELO hostname.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#SetSenderHELO)"
        },
        {
            "name": "GetHeader",
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "decode = true",
                        "type": "boolean"
                    }
                ]
            },
            "returnType": "string",
            "detail": "GetHeader(string $name [, boolean $decode = true]): string",
            "value": "GetHeader($0)",
            "documentation": "Return the value of a header (if multiple headers with the same name exists, the first will be returned). The name is not case sensitive.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#GetHeader)"
        },
        {
            "name": "GetHeaders",
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "decode = true",
                        "type": "boolean"
                    }
                ]
            },
            "returnType": "array",
            "detail": "GetHeaders(string $name [, boolean $decode = true]): array",
            "value": "GetHeaders($0)",
            "documentation": "Return the value of all headers with the name. If name is boolean true, all headers will be returned. The name is not case sensitive.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#GetHeaders)"
        },
        {
            "name": "AddHeader",
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "refold = true",
                        "type": "boolean"
                    }
                ]
            },
            "returnType": "none",
            "detail": "AddHeader(string $name, string $value [, boolean $refold = true]): none",
            "value": "AddHeader($0)",
            "documentation": "Add a new header (at the top of the message).",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#AddHeader)"
        },
        {
            "name": "SetHeader",
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "refold = true",
                        "type": "boolean"
                    }
                ]
            },
            "returnType": "number",
            "detail": "SetHeader(string $name, string $value [, boolean $refold = true]): number",
            "value": "SetHeader($0)",
            "documentation": "Overwrite existing header(s) or create a new header. The name is not case sensitive.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#SetHeader)"
        },
        {
            "name": "PrependHeader",
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "refold = true",
                        "type": "boolean"
                    }
                ]
            },
            "returnType": "number",
            "detail": "PrependHeader(string $name, string $value [, boolean $refold = true]): number",
            "value": "PrependHeader($0)",
            "documentation": "Prepend to existing header(s) or create a new header. The name is not case sensitive.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#PrependHeader)"
        },
        {
            "name": "AppendHeader",
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "refold = true",
                        "type": "boolean"
                    }
                ]
            },
            "returnType": "number",
            "detail": "AppendHeader(string $name, string $value [, boolean $refold = true]): number",
            "value": "AppendHeader($0)",
            "documentation": "Append to existing header(s) or create a new header. The name is not case sensitive.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#AppendHeader)"
        },
        {
            "name": "DelHeader",
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "number",
            "detail": "DelHeader(string $name): number",
            "value": "DelHeader($0)",
            "documentation": "Delete all headers by the name. The name is not case sensitive.",
            "link": "[Full documentation]({{ docsurl }}eodrcpt.html#DelHeader)"
        },
        {
            "name": "GetRoute",
            "deprecated": true,
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "extended_result = false",
                        "type": "boolean"
                    }
                ]
            },
            "returnType": "array",
            "detail": "GetRoute([boolean $extended_result = false]): array",
            "value": "GetRoute($0)",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.0-stable\/eodrcpt.html#GetRoute)"
        },
        {
            "name": "GetDSN",
            "deprecated": true,
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "array or false",
            "detail": "GetDSN(): array or false",
            "value": "GetDSN()",
            "documentation": "Parse a DSN message.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.0-stable\/eodrcpt.html#GetDSN)"
        },
        {
            "name": "GetDSNHeader",
            "deprecated": true,
            "parameters": {
                "required": [
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "skip_decode = false",
                        "type": "boolean"
                    }
                ]
            },
            "returnType": "string",
            "detail": "GetDSNHeader(string $name [, boolean $skip_decode = false]): string",
            "value": "GetDSNHeader($0)",
            "documentation": "Same as GetHeader except it works on attached DSN messages. The name is not case sensitive.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.0-stable\/eodrcpt.html#GetDSNHeader)"
        },
        {
            "name": "ScanRPD",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "number, string or array",
            "detail": "ScanRPD([array $options]): number, string or array",
            "value": "ScanRPD($0)",
            "documentation": "Scan the message using Cyren; anti-spam ctasd (RPD and LocalView) and zero-hour malware detection (VOD). It runs in either inbound or outbound mode, and it's important to configure this correctly with the outbound option.",
            "link": "[Full documentation]({{ docsurl }}integrations.html#ScanRPD)"
        },
        {
            "name": "ScanSA",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "number or array",
            "detail": "ScanSA([array $options]): number or array",
            "value": "ScanSA($0)",
            "documentation": "Scan the message using SpamAssassin.",
            "link": "[Full documentation]({{ docsurl }}integrations.html#ScanSA)"
        },
        {
            "name": "ScanKAV",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "ScanKAV([array $options]): array",
            "value": "ScanKAV($0)",
            "documentation": "Scan the message using the Sophos anti-virus.",
            "link": "[Full documentation]({{ docsurl }}integrations.html#ScanKAV)"
        },
        {
            "name": "ScanCLAM",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "ScanCLAM([array $options]): array",
            "value": "ScanCLAM($0)",
            "documentation": "Scan the message using ClamAV anti-virus.",
            "link": "[Full documentation]({{ docsurl }}integrations.html#ScanCLAM)"
        }
    ],
    "predelivery": [
        {
            "name": "Try",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Try([array $options])",
            "value": "Try($0)",
            "documentation": "Accept the email into the active queue (for delivery as soon as the active queue policies allow). This is the default action.",
            "link": "[Full documentation]({{ docsurl }}predelivery.html#Try)"
        },
        {
            "name": "Queue",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Queue([array $options])",
            "value": "Queue($0)",
            "documentation": "Queue the message to be retried later.",
            "link": "[Full documentation]({{ docsurl }}predelivery.html#Queue)"
        },
        {
            "name": "Bounce",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Bounce()",
            "value": "Bounce()",
            "documentation": "Skip the delivery attempt and execute the post-delivery context with $arguments[\"action\"] set to BOUNCE. By default this will delete the message from the queue, and generate a DSN (bounce) to the sender.",
            "link": "[Full documentation]({{ docsurl }}predelivery.html#Bounce)"
        },
        {
            "name": "Delete",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Delete()",
            "value": "Delete()",
            "documentation": "Skip the delivery attempt and execute the post-delivery context with $arguments[\"action\"] set to DELETE. By default this will delete the message from the queue, without generating a DSN (bounce) to the sender.",
            "link": "[Full documentation]({{ docsurl }}predelivery.html#Delete)"
        },
        {
            "name": "SetMetaData",
            "parameters": {
                "required": [
                    {
                        "name": "metadata",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetMetaData(array $metadata): none",
            "value": "SetMetaData($0)",
            "documentation": "This function updates the queued message's metadata the hqf file. It is consequentially remembered for the next retry.\n                        The metadata must be an array with both string keys and values.",
            "link": "[Full documentation]({{ docsurl }}predelivery.html#SetMetaData)"
        },
        {
            "name": "GetMetaData",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "array",
            "detail": "GetMetaData(): array",
            "value": "GetMetaData()",
            "documentation": "Get the metadata set by SetMetaData(). If no data was set, an empty array is returned.",
            "link": "[Full documentation]({{ docsurl }}predelivery.html#GetMetaData)"
        },
        {
            "name": "GetMailFile",
            "deprecated": true,
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "File",
            "detail": "GetMailFile([array $options]): File",
            "value": "GetMailFile($0)",
            "documentation": "Return a File class to the current mail file.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#GetMailFile)"
        },
        {
            "name": "Reschedule",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "delay",
                        "type": "number"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Reschedule(number $delay [, array $options])",
            "value": "Reschedule($0)",
            "documentation": "Reschedule the message for delay seconds.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#Reschedule)"
        },
        {
            "name": "SetDestination",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "host",
                        "type": "string"
                    }
                ],
                "optional": [
                    {
                        "name": "port",
                        "type": "number"
                    }
                ]
            },
            "returnType": "none",
            "detail": "SetDestination(string $host [, number $port]): none",
            "value": "SetDestination($0)",
            "documentation": "Set the host and port for the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetDestination)"
        },
        {
            "name": "SetProtocol",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "protocol",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetProtocol(string $protocol): none",
            "value": "SetProtocol($0)",
            "documentation": "Set the protocol for the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetProtocol)"
        },
        {
            "name": "SetTLS",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetTLS(array $options): none",
            "value": "SetTLS($0)",
            "documentation": "Set the TLS options for the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetTLS)"
        },
        {
            "name": "SetSASL",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "username",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetSASL(string $username, string $password): none",
            "value": "SetSASL($0)",
            "documentation": "Set the SASL AUTH username and password for the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetSASL)"
        },
        {
            "name": "SetXCLIENT",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "attributes",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetXCLIENT(array $attributes): none",
            "value": "SetXCLIENT($0)",
            "documentation": "Send the following XCLIENT xclient attributes. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetXCLIENT)"
        },
        {
            "name": "SetHELO",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "hostname",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetHELO(string $hostname): none",
            "value": "SetHELO($0)",
            "documentation": "Set the HELO hostname for the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetHELO)"
        },
        {
            "name": "SetSourceIP",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "id",
                        "type": "string or array"
                    }
                ],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "none",
            "detail": "SetSourceIP(string or array $id [, array $options]): none",
            "value": "SetSourceIP($0)",
            "documentation": "This function changes the source IP of the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetSourceIP)"
        },
        {
            "name": "SetSender",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "sender",
                        "type": "string or array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetSender(string or array $sender): none",
            "value": "SetSender($0)",
            "documentation": "Set the sender MAIL FROM for the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetSender)"
        },
        {
            "name": "SetSenderParams",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "params",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetSenderParams(array $params): none",
            "value": "SetSenderParams($0)",
            "documentation": "Set the sender MAIL FROM params for the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetSenderParams)"
        },
        {
            "name": "SetRecipient",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "recipient",
                        "type": "string or array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetRecipient(string or array $recipient): none",
            "value": "SetRecipient($0)",
            "documentation": "Set the recipient RCPT TO for the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetRecipient)"
        },
        {
            "name": "SetRecipientParams",
            "compat": 2,
            "parameters": {
                "required": [
                    {
                        "name": "params",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetRecipientParams(array $params): none",
            "value": "SetRecipientParams($0)",
            "documentation": "Set the recipient RCPT TO params for the current delivery attempt. It is not remembered for the next retry.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/predelivery.html#SetRecipientParams)"
        }
    ],
    "postdelivery": [
        {
            "name": "Queue",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Queue([array $options])",
            "value": "Queue($0)",
            "documentation": "Queue the message to be retried later. This is the default action for non-permanent (temporary) errors while the retry count isn't exceeded.\n                        Permanent errors include 5xx SMTP responses, permanent DNS failures, etc.",
            "link": "[Full documentation]({{ docsurl }}postdelivery.html#Queue)"
        },
        {
            "name": "Bounce",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Bounce([array $options])",
            "value": "Bounce($0)",
            "documentation": "Delete the message from the queue, and generating a DSN (bounce) to the sender.",
            "link": "[Full documentation]({{ docsurl }}postdelivery.html#Bounce)"
        },
        {
            "name": "Delete",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Delete()",
            "value": "Delete()",
            "documentation": "Delete the message from the queue, without generating a DSN (bounce) to the sender.",
            "link": "[Full documentation]({{ docsurl }}postdelivery.html#Delete)"
        },
        {
            "name": "Default",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Default()",
            "value": "Default()",
            "documentation": "Run the default action pending the current $arguments[\"action\"]. This is the default action if not calling Queue(), Bounce() or Delete(). If the message was delivered no action will be taken and the script will terminate.",
            "link": "[Full documentation]({{ docsurl }}postdelivery.html#Default)"
        },
        {
            "name": "SetMetaData",
            "parameters": {
                "required": [
                    {
                        "name": "metadata",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "returnType": "none",
            "detail": "SetMetaData(array $metadata): none",
            "value": "SetMetaData($0)",
            "documentation": "This function updates the queued message's metadata in the hqf file. It is consequentially remembered for the next retry.\n                        The metadata must be an array with both string keys and values.",
            "link": "[Full documentation]({{ docsurl }}postdelivery.html#SetMetaData)"
        },
        {
            "name": "GetMetaData",
            "parameters": {
                "required": [],
                "optional": []
            },
            "returnType": "array",
            "detail": "GetMetaData(): array",
            "value": "GetMetaData()",
            "documentation": "Get the metadata set by SetMetaData(). If no data was set, an empty array is returned.",
            "link": "[Full documentation]({{ docsurl }}postdelivery.html#GetMetaData)"
        },
        {
            "name": "GetMailFile",
            "deprecated": true,
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "File",
            "detail": "GetMailFile([array $options]): File",
            "value": "GetMailFile($0)",
            "documentation": "Return a File class to the current mail file.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/postdelivery.html#GetMailFile)"
        },
        {
            "name": "Retry",
            "compat": 2,
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Retry([array $options])",
            "value": "Retry($0)",
            "documentation": "Retry the message again later. This is the default action for non-permanent (5XX) $errorcode's. If the maximum retry count is exceeded; the message is either bounced or deleted depending on the transport's settings.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/postdelivery.html#Retry)"
        },
        {
            "name": "GetTLS",
            "compat": 2,
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "returnType": "array",
            "detail": "GetTLS([array $options]): array",
            "value": "GetTLS($0)",
            "documentation": "Get the TLS information for the delivery attempt.",
            "link": "[Full documentation](https:\/\/docs.halon.io\/hsl\/archive\/5.1-stable\/postdelivery.html#GetTLS)"
        }
    ],
    "api": [
        {
            "name": "Authenticate",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "options",
                        "type": "array"
                    }
                ]
            },
            "detail": "Authenticate([array $options])",
            "value": "Authenticate($0)",
            "documentation": "Authorizes the API call.",
            "link": "[Full documentation]({{ docsurl }}api.html#Authenticate)"
        },
        {
            "name": "Deny",
            "parameters": {
                "required": [],
                "optional": [
                    {
                        "name": "message",
                        "type": "string"
                    }
                ]
            },
            "detail": "Deny([string $message])",
            "value": "Deny($0)",
            "documentation": "Denies the API call.",
            "link": "[Full documentation]({{ docsurl }}api.html#Deny)"
        }
    ],
    "firewall": [
        {
            "name": "Allow",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Allow()",
            "value": "Allow()",
            "documentation": "Allow IP connection to be established.",
            "link": "[Full documentation]({{ docsurl }}firewall.html#Allow)"
        },
        {
            "name": "Block",
            "parameters": {
                "required": [],
                "optional": []
            },
            "detail": "Block()",
            "value": "Block()",
            "documentation": "Block IP connection from being established.",
            "link": "[Full documentation]({{ docsurl }}firewall.html#Block)"
        }
    ]
}
