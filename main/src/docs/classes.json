{
    "core": [
        {
            "name": "Map",
            "parameters": {
                "required": [
                    {
                        "name": "keytype",
                        "type": "string"
                    },
                    {
                        "name": "valuetype",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "methods": [
                {
                    "name": "set",
                    "parameters": {
                        "required": [
                            {
                                "name": "key",
                                "type": "string"
                            },
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "boolean",
                    "detail": "Map->set(string $key, string $value): boolean",
                    "value": "set($0)",
                    "documentation": "Add or update the key with the value.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Map.set)"
                },
                {
                    "name": "has",
                    "parameters": {
                        "required": [
                            {
                                "name": "key",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "boolean",
                    "detail": "Map->has(string $key): boolean",
                    "value": "has($0)",
                    "documentation": "Check if the key exists.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Map.has)"
                },
                {
                    "name": "get",
                    "parameters": {
                        "required": [
                            {
                                "name": "key",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "any",
                    "detail": "Map->get(string $key): any",
                    "value": "get($0)",
                    "documentation": "Get the value of key or none if it doesn't exists.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Map.get)"
                },
                {
                    "name": "delete",
                    "parameters": {
                        "required": [
                            {
                                "name": "key",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "boolean",
                    "detail": "Map->delete(string $key): boolean",
                    "value": "delete($0)",
                    "documentation": "Delete the key from the map.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Map.delete)"
                },
                {
                    "name": "size",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "Map->size(): number",
                    "value": "size()",
                    "documentation": "Get number of keys in the map.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Map.size)"
                },
                {
                    "name": "clear",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "none",
                    "detail": "Map->clear(): none",
                    "value": "clear()",
                    "documentation": "Delete all keys in the map.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Map.clear)"
                },
                {
                    "name": "entries",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "Iterator",
                    "detail": "Map->entries(): Iterator",
                    "value": "entries()",
                    "documentation": "Iterator to all keys and values in the map in no specific order.\n                                The iterators value will be an array containg the [0=&gt;key, 1=&gt;value].\n                                If iterating the map with foreach, the key and value will be mapped accordingly.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Map.entries)"
                }
            ],
            "detail": "Map(string $keytype, string $valuetype)",
            "value": "Map($0)",
            "documentation": "The Map class maps keys to values. Keys are unique and may only point to a single value.\n                        This map is strongly-typed, meaning you have to define which data types you intend to store in it.\n                        There is a limited number of key types, but they are optimized for performance.\n                        As for value you may choose to use the any type to support all data types and also mixed in the map,\n                        but it is more memory efficent to use a specific type.",
            "link": "[Full documentation]({{ docsurl }}functions.html#Map)"
        },
        {
            "name": "Set",
            "parameters": {
                "required": [
                    {
                        "name": "keytype",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "methods": [
                {
                    "name": "add",
                    "parameters": {
                        "required": [
                            {
                                "name": "key",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "boolean",
                    "detail": "Set->add(string $key): boolean",
                    "value": "add($0)",
                    "documentation": "Add the key to the set.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Set.add)"
                },
                {
                    "name": "has",
                    "parameters": {
                        "required": [
                            {
                                "name": "key",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "boolean",
                    "detail": "Set->has(string $key): boolean",
                    "value": "has($0)",
                    "documentation": "Check if the key exists.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Set.has)"
                },
                {
                    "name": "delete",
                    "parameters": {
                        "required": [
                            {
                                "name": "key",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "boolean",
                    "detail": "Set->delete(string $key): boolean",
                    "value": "delete($0)",
                    "documentation": "Delete the key from the set.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Set.delete)"
                },
                {
                    "name": "size",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "Set->size(): number",
                    "value": "size()",
                    "documentation": "Get number of keys in the set.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Set.size)"
                },
                {
                    "name": "clear",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "none",
                    "detail": "Set->clear(): none",
                    "value": "clear()",
                    "documentation": "Delete all keys in the set.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Set.clear)"
                },
                {
                    "name": "values",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "Iterator",
                    "detail": "Set->values(): Iterator",
                    "value": "values()",
                    "documentation": "Iterator to all keys in the set in no specific order.\n                                If iterating the set with foreach, the key (in the set) will be mapped to the value in the foreach statement.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Set.values)"
                }
            ],
            "detail": "Set(string $keytype)",
            "value": "Set($0)",
            "documentation": "The Set class holds keys in a unique collection.\n                        This set is strongly-typed, meaning you have to define which data types you intend to store in it.\n                        There is a limited number of key types, but they are optimized for performance.",
            "link": "[Full documentation]({{ docsurl }}functions.html#Set)"
        },
        {
            "name": "Iconv",
            "parameters": {
                "required": [
                    {
                        "name": "fromcharset",
                        "type": "string"
                    },
                    {
                        "name": "tocharset",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "methods": [
                {
                    "name": "close",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "detail": "Iconv->close()",
                    "value": "close()",
                    "documentation": "Close the Iconv resource and destroy the internal resource.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Iconv.close)"
                },
                {
                    "name": "convert",
                    "parameters": {
                        "required": [
                            {
                                "name": "text",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "Iconv->convert(string $text): string or none",
                    "value": "convert($0)",
                    "documentation": "Convert the text between the two different character sets. On error none is returned and you may call Iconv.errno() to get the error code.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Iconv.convert)"
                },
                {
                    "name": "errno",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "Iconv->errno(): number",
                    "value": "errno()",
                    "documentation": "Get the latest errno returned from the underlying Iconv API.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Iconv.errno)"
                }
            ],
            "detail": "Iconv(string $fromcharset, string $tocharset)",
            "value": "Iconv($0)",
            "documentation": "This class allows characters set conversions using the Iconv library. Be aware that different versions of Iconv may have subtile differences.",
            "link": "[Full documentation]({{ docsurl }}functions.html#Iconv)"
        },
        {
            "name": "File",
            "parameters": {
                "required": [
                    {
                        "name": "fileresource",
                        "type": "FileResource"
                    }
                ],
                "optional": []
            },
            "methods": [
                {
                    "name": "close",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "None",
                    "detail": "File->close(): None",
                    "value": "close()",
                    "documentation": "Close the file and destroy the internal file resource.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#File.close)"
                },
                {
                    "name": "read",
                    "parameters": {
                        "required": [],
                        "optional": [
                            {
                                "name": "length",
                                "type": "number"
                            }
                        ]
                    },
                    "returnType": "string or none",
                    "detail": "File->read([number $length]): string or none",
                    "value": "read($0)",
                    "documentation": "Read data from file. On EOF an empty string is returned. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#File.read)"
                },
                {
                    "name": "readline",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string, boolean or none",
                    "detail": "File->readline(): string, boolean or none",
                    "value": "readline()",
                    "documentation": "Read a line from file (without the CRLF or LF). If there are no more lines false is returned, and on error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#File.readline)"
                },
                {
                    "name": "seek",
                    "parameters": {
                        "required": [
                            {
                                "name": "offset",
                                "type": "number"
                            }
                        ],
                        "optional": [
                            {
                                "name": "whence = \"SEEK_SET\"",
                                "type": "string"
                            }
                        ]
                    },
                    "returnType": "number or none",
                    "detail": "File->seek(number $offset [, string $whence = \"SEEK_SET\"]): number or none",
                    "value": "seek($0)",
                    "documentation": "Seek to the offset in the file. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#File.seek)"
                },
                {
                    "name": "tell",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number or none",
                    "detail": "File->tell(): number or none",
                    "value": "tell()",
                    "documentation": "Get the current file position. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#File.tell)"
                },
                {
                    "name": "getPath",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "File->getPath(): string or none",
                    "value": "getPath()",
                    "documentation": "Get the path of a file. If no path information is available none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#File.getPath)"
                },
                {
                    "name": "toFFIValue",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "FFIValue or none",
                    "detail": "File->toFFIValue(): FFIValue or none",
                    "value": "toFFIValue()",
                    "documentation": "Return a shared pointer to a C FILE* representing the current File content and position. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#File.toFFIValue)"
                },
                {
                    "static": true,
                    "name": "String",
                    "parameters": {
                        "required": [
                            {
                                "name": "data",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "File",
                    "detail": "File::String(string $data): File",
                    "value": "String($0)",
                    "documentation": "Return a File resource containing the data.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#File.String)"
                },
                {
                    "static": true,
                    "name": "read",
                    "parameters": {
                        "required": [
                            {
                                "name": "filename",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "File::read(string $filename): string or none",
                    "value": "read($0)",
                    "documentation": "Read all data from file. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#File.read)"
                }
            ],
            "detail": "File(FileResource $fileresource)",
            "value": "File($0)",
            "documentation": "This class allows low level file access. A file resource is created for each File instance, this resource is automatically garbage collected (closed) once the object is destroyed.",
            "link": "[Full documentation]({{ docsurl }}functions.html#File)"
        },
        {
            "name": "MIME",
            "parameters": {
                "required": [],
                "optional": []
            },
            "methods": [
                {
                    "name": "addHeader",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            },
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "MIME",
                    "detail": "MIME->addHeader(string $name, string $value [, array $options]): MIME",
                    "value": "addHeader($0)",
                    "documentation": "Add a header. The value may be encoded (if needed) and reformatted.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIME.addHeader)"
                },
                {
                    "name": "appendPart",
                    "parameters": {
                        "required": [
                            {
                                "name": "part",
                                "type": "MIME"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "MIME",
                    "detail": "MIME->appendPart(MIME $part): MIME",
                    "value": "appendPart($0)",
                    "documentation": "Add a MIME part (child) object, this is useful when building a multipart MIME.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIME.appendPart)"
                },
                {
                    "name": "setBody",
                    "parameters": {
                        "required": [
                            {
                                "name": "body",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "MIME",
                    "detail": "MIME->setBody(string $body): MIME",
                    "value": "setBody($0)",
                    "documentation": "Set the MIME part body content. In case the MIME part has children (multipart) this will be the MIME parts preamble. The body will be encoded as either quoted-printable or base64 depending on the type of data if no Content-Transfer-Encoding header is explicitly added.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIME.setBody)"
                },
                {
                    "name": "setType",
                    "parameters": {
                        "required": [
                            {
                                "name": "type",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "MIME",
                    "detail": "MIME->setType(string $type): MIME",
                    "value": "setType($0)",
                    "documentation": "Set the type field of the Content-Type header. The default type is text\/plain, and for text\/... the charset is always utf-8.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIME.setType)"
                },
                {
                    "name": "setBoundary",
                    "parameters": {
                        "required": [
                            {
                                "name": "boundary",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "MIME",
                    "detail": "MIME->setBoundary(string $boundary): MIME",
                    "value": "setBoundary($0)",
                    "documentation": "Set the MIME boundary for multipart\/* messages. The default is to use an UUID.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIME.setBoundary)"
                },
                {
                    "name": "signDKIM",
                    "parameters": {
                        "required": [
                            {
                                "name": "selector",
                                "type": "string"
                            },
                            {
                                "name": "domain",
                                "type": "string"
                            },
                            {
                                "name": "key",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "MIME",
                    "detail": "MIME->signDKIM(string $selector, string $domain, string $key [, array $options]): MIME",
                    "value": "signDKIM($0)",
                    "documentation": "Sign the MIME structure (message) using DKIM.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIME.signDKIM)"
                },
                {
                    "name": "toString",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string",
                    "detail": "MIME->toString(): string",
                    "value": "toString()",
                    "documentation": "Return the created MIME as a string. This function useful for debugging.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIME.toString)"
                },
                {
                    "name": "queue",
                    "parameters": {
                        "required": [
                            {
                                "name": "sender",
                                "type": "string or array"
                            },
                            {
                                "name": "recipient",
                                "type": "string or array"
                            },
                            {
                                "name": "transportid",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "array",
                    "detail": "MIME->queue(string or array $sender, string or array $recipient, string $transportid [, array $options]): array",
                    "value": "queue($0)",
                    "documentation": "Queue the message.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIME.queue)"
                }
            ],
            "detail": "MIME()",
            "value": "MIME()",
            "documentation": "This is a MIME \"string builder\" used to construct MIME parts.",
            "link": "[Full documentation]({{ docsurl }}functions.html#MIME)"
        },
        {
            "name": "MailMessage",
            "parameters": {
                "required": [],
                "optional": []
            },
            "methods": [
                {
                    "name": "reset",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "MailMessage->reset(): number",
                    "value": "reset()",
                    "documentation": "Undo all changes on the message.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.reset)"
                },
                {
                    "name": "snapshot",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "MailMessage->snapshot(): number",
                    "value": "snapshot()",
                    "documentation": "Take a snapshot of the current state of the MIME object (to be used with MailMessage.restore()).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.snapshot)"
                },
                {
                    "name": "restore",
                    "parameters": {
                        "required": [
                            {
                                "name": "id",
                                "type": "number"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "boolean",
                    "detail": "MailMessage->restore(number $id): boolean",
                    "value": "restore($0)",
                    "documentation": "Restore to a snapshot (to be used with MailMessage.snapshot()).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.restore)"
                },
                {
                    "name": "modifyContent",
                    "parameters": {
                        "required": [
                            {
                                "name": "start",
                                "type": "number"
                            },
                            {
                                "name": "count",
                                "type": "number"
                            },
                            {
                                "name": "data",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "MailMessage",
                    "detail": "MailMessage->modifyContent(number $start, number $count, string $data): MailMessage",
                    "value": "modifyContent($0)",
                    "documentation": "An advanced method of adding custom modification that will be applied to the message (it works the same way as other modification function, eg. MIMEPart.addHeader()). This function should not be used when are MIMEPart operations available doing the supposed modification.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.modifyContent)"
                },
                {
                    "name": "toFile",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "File",
                    "detail": "MailMessage->toFile(): File",
                    "value": "toFile()",
                    "documentation": "Return a File class for the current MIME object (with all changes applied).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.toFile)"
                },
                {
                    "name": "toString",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string",
                    "detail": "MailMessage->toString(): string",
                    "value": "toString()",
                    "documentation": "Return the MailMessage as a string (with all changes applied).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.toString)"
                },
                {
                    "name": "signDKIM",
                    "parameters": {
                        "required": [
                            {
                                "name": "selector",
                                "type": "string"
                            },
                            {
                                "name": "domain",
                                "type": "string"
                            },
                            {
                                "name": "key",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "MailMessage or none",
                    "detail": "MailMessage->signDKIM(string $selector, string $domain, string $key [, array $options]): MailMessage or none",
                    "value": "signDKIM($0)",
                    "documentation": "Sign the message using DKIM. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.signDKIM)"
                },
                {
                    "name": "verifyDKIM",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "array",
                    "detail": "MailMessage->verifyDKIM(): array",
                    "value": "verifyDKIM()",
                    "documentation": "DKIM verify a DKIM-Signature or ARC-Message-Signature header. The header should include both the header name and value (unmodified).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.verifyDKIM)"
                },
                {
                    "name": "send",
                    "parameters": {
                        "required": [
                            {
                                "name": "sender",
                                "type": "string or array"
                            },
                            {
                                "name": "recipients",
                                "type": "array of (string or array)"
                            },
                            {
                                "name": "server",
                                "type": "string or array"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "array",
                    "detail": "MailMessage->send(string or array $sender, array of (string or array) $recipients, string or array $server): array",
                    "value": "send($0)",
                    "documentation": "Try to send the message to the server.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.send)"
                },
                {
                    "name": "queue",
                    "parameters": {
                        "required": [
                            {
                                "name": "sender",
                                "type": "string or array"
                            },
                            {
                                "name": "recipient",
                                "type": "string or array"
                            },
                            {
                                "name": "transportid",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "array",
                    "detail": "MailMessage->queue(string or array $sender, string or array $recipient, string $transportid [, array $options]): array",
                    "value": "queue($0)",
                    "documentation": "Queue the message.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.queue)"
                },
                {
                    "static": true,
                    "name": "String",
                    "parameters": {
                        "required": [
                            {
                                "name": "data",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "MailMessage or none",
                    "detail": "MailMessage::String(string $data): MailMessage or none",
                    "value": "String($0)",
                    "documentation": "Return a MailMessage resource containing the data.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage.String)"
                }
            ],
            "detail": "MailMessage()",
            "value": "MailMessage()",
            "documentation": "This class extends the MIMEPart class, all instances of this class automatically holds a reference to the top level MIMEPart object.",
            "link": "[Full documentation]({{ docsurl }}functions.html#MailMessage)"
        },
        {
            "name": "MIMEPart",
            "parameters": {
                "required": [],
                "optional": []
            },
            "methods": [
                {
                    "name": "getID",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string",
                    "detail": "MIMEPart->getID(): string",
                    "value": "getID()",
                    "documentation": "Return the MIME part's ID.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getID)"
                },
                {
                    "name": "getSize",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "MIMEPart->getSize(): number",
                    "value": "getSize()",
                    "documentation": "Return the MIME part's size in bytes.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getSize)"
                },
                {
                    "name": "getFileName",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "MIMEPart->getFileName(): string or none",
                    "value": "getFileName()",
                    "documentation": "Return the MIME part's file name (if it has one).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getFileName)"
                },
                {
                    "name": "getType",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "MIMEPart->getType(): string or none",
                    "value": "getType()",
                    "documentation": "Return the MIME part's Content-Type's type field (eg. text\/plain).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getType)"
                },
                {
                    "name": "getHeader",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "string or none",
                    "detail": "MIMEPart->getHeader(string $name [, array $options]): string or none",
                    "value": "getHeader($0)",
                    "documentation": "Return the value of a header (if multiple headers with the same name exists, the first will be returned). If no header is found, the value none is returned. The name is not case sensitive.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getHeader)"
                },
                {
                    "name": "getHeaders",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "array of string",
                    "detail": "MIMEPart->getHeaders(string $name [, array $options]): array of string",
                    "value": "getHeaders($0)",
                    "documentation": "Return a list of header values. If no header is found, an empty list is returned. The name is not case sensitive.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getHeaders)"
                },
                {
                    "name": "getHeaderNames",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "array of string",
                    "detail": "MIMEPart->getHeaderNames(): array of string",
                    "value": "getHeaderNames()",
                    "documentation": "Return a list of all header names, from the top. The names are in lower case.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getHeaderNames)"
                },
                {
                    "name": "setHeader",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            },
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "number",
                    "detail": "MIMEPart->setHeader(string $name, string $value [, array $options]): number",
                    "value": "setHeader($0)",
                    "documentation": "Overwrite existing header(s) or create a new header. The name is not case sensitive.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.setHeader)"
                },
                {
                    "name": "addHeader",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            },
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "none",
                    "detail": "MIMEPart->addHeader(string $name, string $value [, array $options]): none",
                    "value": "addHeader($0)",
                    "documentation": "Add a new header (at the top of the message).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.addHeader)"
                },
                {
                    "name": "delHeader",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "number",
                    "detail": "MIMEPart->delHeader(string $name [, array $options]): number",
                    "value": "delHeader($0)",
                    "documentation": "Delete all headers by the name. The name is not case sensitive.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.delHeader)"
                },
                {
                    "name": "remove",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "none",
                    "detail": "MIMEPart->remove(): none",
                    "value": "remove()",
                    "documentation": "Remove this MIME part.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.remove)"
                },
                {
                    "name": "getBody",
                    "parameters": {
                        "required": [],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "string or none",
                    "detail": "MIMEPart->getBody([array $options]): string or none",
                    "value": "getBody($0)",
                    "documentation": "Get the body (content) of a MIME part. The content will be decoded according to the Content-Transfer-Encoding header.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getBody)"
                },
                {
                    "name": "setBody",
                    "parameters": {
                        "required": [
                            {
                                "name": "data",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "MIMEPart or none",
                    "detail": "MIMEPart->setBody(string $data): MIMEPart or none",
                    "value": "setBody($0)",
                    "documentation": "Set the body (content) of a MIME part. The MIME parts encoding (Content-Transfer-Encoding) will be changed to the best readable match, that can be either 7bit, quoted-printable or base64 and the data will encoded as such.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.setBody)"
                },
                {
                    "name": "getPreamble",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "MIMEPart->getPreamble(): string or none",
                    "value": "getPreamble()",
                    "documentation": "Get the multipart MIME parts epilogue text. If the MIMEPart isn't a multipart MIME, none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getPreamble)"
                },
                {
                    "name": "setPreamble",
                    "parameters": {
                        "required": [
                            {
                                "name": "data",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "MIMEPart or none",
                    "detail": "MIMEPart->setPreamble(string $data): MIMEPart or none",
                    "value": "setPreamble($0)",
                    "documentation": "Set the multipart MIME parts preamble text. If the MIMEPart isn't a multipart MIME, none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.setPreamble)"
                },
                {
                    "name": "getEpilogue",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "MIMEPart->getEpilogue(): string or none",
                    "value": "getEpilogue()",
                    "documentation": "Get the multipart MIME parts epilogue text. If the MIMEPart isn't a multipart MIME, none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getEpilogue)"
                },
                {
                    "name": "setEpilogue",
                    "parameters": {
                        "required": [
                            {
                                "name": "data",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "MIMEPart or none",
                    "detail": "MIMEPart->setEpilogue(string $data): MIMEPart or none",
                    "value": "setEpilogue($0)",
                    "documentation": "Set the multipart MIME parts epilogue text. If the MIMEPart isn't a multipart MIME, none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.setEpilogue)"
                },
                {
                    "name": "prependPart",
                    "parameters": {
                        "required": [
                            {
                                "name": "part",
                                "type": "MIME"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "MIMEPart or none",
                    "detail": "MIMEPart->prependPart(MIME $part [, array $options]): MIMEPart or none",
                    "value": "prependPart($0)",
                    "documentation": "Add a MIME part before this part. If the MIMEPart isn't a multipart MIME, none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.prependPart)"
                },
                {
                    "name": "appendPart",
                    "parameters": {
                        "required": [
                            {
                                "name": "part",
                                "type": "MIME"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "MIMEPart or none",
                    "detail": "MIMEPart->appendPart(MIME $part [, array $options]): MIMEPart or none",
                    "value": "appendPart($0)",
                    "documentation": "Add a MIME part after this part. If the MIMEPart isn't a multipart MIME, none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.appendPart)"
                },
                {
                    "name": "replacePart",
                    "parameters": {
                        "required": [
                            {
                                "name": "part",
                                "type": "MIME"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "none",
                    "detail": "MIMEPart->replacePart(MIME $part): none",
                    "value": "replacePart($0)",
                    "documentation": "Replace the current MIME part.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.replacePart)"
                },
                {
                    "name": "findByType",
                    "parameters": {
                        "required": [
                            {
                                "name": "type",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "array of MIMEPart objects",
                    "detail": "MIMEPart->findByType(string $type): array of MIMEPart objects",
                    "value": "findByType($0)",
                    "documentation": "Find descendant parts (on any depth) based on their Content-Type.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.findByType)"
                },
                {
                    "name": "findByFileName",
                    "parameters": {
                        "required": [
                            {
                                "name": "filename",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "array of MIMEPart objects",
                    "detail": "MIMEPart->findByFileName(string $filename): array of MIMEPart objects",
                    "value": "findByFileName($0)",
                    "documentation": "Find descendant parts (on any depth) based on their file name.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.findByFileName)"
                },
                {
                    "name": "getParts",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "array of MIMEPart objects",
                    "detail": "MIMEPart->getParts(): array of MIMEPart objects",
                    "value": "getParts()",
                    "documentation": "Return child parts.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart.getParts)"
                }
            ],
            "detail": "MIMEPart()",
            "value": "MIMEPart()",
            "documentation": "This class represent a MIME part in the MIME tree.",
            "link": "[Full documentation]({{ docsurl }}functions.html#MIMEPart)"
        },
        {
            "name": "LDAP",
            "parameters": {
                "required": [
                    {
                        "name": "uri",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "methods": [
                {
                    "name": "setoption",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            },
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "LDAP or none",
                    "detail": "LDAP->setoption(string $name, any $value): LDAP or none",
                    "value": "setoption($0)",
                    "documentation": "Set LDAP connection options. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.setoption)"
                },
                {
                    "name": "getoption",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "any or none",
                    "detail": "LDAP->getoption(string $name): any or none",
                    "value": "getoption($0)",
                    "documentation": "Get LDAP connection options. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.getoption)"
                },
                {
                    "name": "starttls",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "LDAP or none",
                    "detail": "LDAP->starttls(): LDAP or none",
                    "value": "starttls()",
                    "documentation": "Issue STARTTLS on LDAP connection. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.starttls)"
                },
                {
                    "name": "bind",
                    "parameters": {
                        "required": [],
                        "optional": [
                            {
                                "name": "dn",
                                "type": "string"
                            },
                            {
                                "name": "cred",
                                "type": "string"
                            }
                        ]
                    },
                    "returnType": "LDAP or none",
                    "detail": "LDAP->bind([string $dn [, string $cred]]): LDAP or none",
                    "value": "bind($0)",
                    "documentation": "Bind the LDAP connection. For anonymous bind, do not specify the credentials. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.bind)"
                },
                {
                    "name": "search",
                    "parameters": {
                        "required": [
                            {
                                "name": "basedn",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "LDAPResult or none",
                    "detail": "LDAP->search(string $basedn [, array $options]): LDAPResult or none",
                    "value": "search($0)",
                    "documentation": "Search LDAP connection in the current base and subtree. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.search)"
                },
                {
                    "name": "unbind",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "LDAP or none",
                    "detail": "LDAP->unbind(): LDAP or none",
                    "value": "unbind()",
                    "documentation": "Unbind the LDAP connection. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.unbind)"
                },
                {
                    "name": "errno",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "LDAP->errno(): number",
                    "value": "errno()",
                    "documentation": "Get the latest errno returned from the underlying OpenLDAP API.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.errno)"
                },
                {
                    "name": "getpeerx509",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "X509 or none",
                    "detail": "LDAP->getpeerx509(): X509 or none",
                    "value": "getpeerx509()",
                    "documentation": "Get the peer certificate (X.509) as a X509 instance. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.getpeerx509)"
                },
                {
                    "static": true,
                    "name": "err2string",
                    "parameters": {
                        "required": [
                            {
                                "name": "errno",
                                "type": "number"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "string",
                    "detail": "LDAP::err2string(number $errno): string",
                    "value": "err2string($0)",
                    "documentation": "Get a descriptive error message, uses OpenLDAP's ldap_err2string().",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.err2string)"
                },
                {
                    "static": true,
                    "name": "filter_escape",
                    "parameters": {
                        "required": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "string",
                    "detail": "LDAP::filter_escape(string $value): string",
                    "value": "filter_escape($0)",
                    "documentation": "LDAP escape values to be used in LDAP filters.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.filter_escape)"
                },
                {
                    "static": true,
                    "name": "str2dn",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "array or none",
                    "detail": "LDAP::str2dn(): array or none",
                    "value": "str2dn()",
                    "documentation": "Parses the string representation of a distinguished name str into its components, returning an array of tupels. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.str2dn)"
                },
                {
                    "static": true,
                    "name": "dn2str",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "LDAP::dn2str(): string or none",
                    "value": "dn2str()",
                    "documentation": "Performs the inverse operation of LDAP.str2dn(), returning a string representation of dn with the necessary escaping. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAP.dn2str)"
                }
            ],
            "detail": "LDAP(string $uri)",
            "value": "LDAP($0)",
            "documentation": "The LDAP class is a OpenLDAP wrapper class. The URI should be in the format of ldap:\/\/ or ldaps:\/\/. Multiple hosts may be given separated by space.",
            "link": "[Full documentation]({{ docsurl }}functions.html#LDAP)"
        },
        {
            "name": "LDAPResult",
            "parameters": {
                "required": [],
                "optional": []
            },
            "methods": [
                {
                    "name": "next",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "array or none",
                    "detail": "LDAPResult->next(): array or none",
                    "value": "next()",
                    "documentation": "Return the next result. If there are no more results false is returned, and on error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#LDAPResult.next)"
                }
            ],
            "detail": "LDAPResult()",
            "value": "LDAPResult()",
            "documentation": "A LDAP result iterable object which holds the result from an LDAP search.",
            "link": "[Full documentation]({{ docsurl }}functions.html#LDAPResult)"
        },
        {
            "name": "Socket",
            "parameters": {
                "required": [
                    {
                        "name": "family",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "methods": [
                {
                    "name": "bind",
                    "parameters": {
                        "required": [
                            {
                                "name": "address",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "port",
                                "type": "number"
                            },
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "Socket or none",
                    "detail": "Socket->bind(string $address [, number $port [, array $options]]): Socket or none",
                    "value": "bind($0)",
                    "documentation": "Bind the socket to address and port. The address must match the Sockets address family. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.bind)"
                },
                {
                    "name": "close",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "Socket or none",
                    "detail": "Socket->close(): Socket or none",
                    "value": "close()",
                    "documentation": "Close the socket and destroy the internal socket resource. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.close)"
                },
                {
                    "name": "connect",
                    "parameters": {
                        "required": [
                            {
                                "name": "address",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "port",
                                "type": "number"
                            }
                        ]
                    },
                    "returnType": "Socket or none",
                    "detail": "Socket->connect(string $address [, number $port]): Socket or none",
                    "value": "connect($0)",
                    "documentation": "Connect the socket to address and port. The address must match the Sockets address family. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.connect)"
                },
                {
                    "name": "errno",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "Socket->errno(): number",
                    "value": "errno()",
                    "documentation": "Get the latest errno returned from the underlying POSIX socket API.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.errno)"
                },
                {
                    "name": "recv",
                    "parameters": {
                        "required": [
                            {
                                "name": "length",
                                "type": "number"
                            }
                        ],
                        "optional": [
                            {
                                "name": "flags",
                                "type": "string"
                            }
                        ]
                    },
                    "returnType": "string or none",
                    "detail": "Socket->recv(number $length [, string $flags]): string or none",
                    "value": "recv($0)",
                    "documentation": "Receive data on socket. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.recv)"
                },
                {
                    "name": "send",
                    "parameters": {
                        "required": [
                            {
                                "name": "data",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "number or none",
                    "detail": "Socket->send(string $data): number or none",
                    "value": "send($0)",
                    "documentation": "Send data on socket. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.send)"
                },
                {
                    "name": "settimeout",
                    "parameters": {
                        "required": [
                            {
                                "name": "timeout",
                                "type": "number"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "Socket",
                    "detail": "Socket->settimeout(number $timeout): Socket",
                    "value": "settimeout($0)",
                    "documentation": "Set the timeout for socket operations.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.settimeout)"
                },
                {
                    "name": "shutdown",
                    "parameters": {
                        "required": [
                            {
                                "name": "how",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "Socket or none",
                    "detail": "Socket->shutdown(string $how): Socket or none",
                    "value": "shutdown($0)",
                    "documentation": "Shutdown the socket for receiving, sending or both. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.shutdown)"
                },
                {
                    "name": "toFFIValue",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "FFIValue or none",
                    "detail": "Socket->toFFIValue(): FFIValue or none",
                    "value": "toFFIValue()",
                    "documentation": "Return the file descriptor representing the current socket. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.toFFIValue)"
                },
                {
                    "static": true,
                    "name": "AF",
                    "parameters": {
                        "required": [
                            {
                                "name": "address",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "Socket::AF(string $address): string or none",
                    "value": "AF($0)",
                    "documentation": "Return the AF family of an address (either AF_INET or AF_INET6). A utility function helpful when constructing a Socket class. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#Socket.AF)"
                }
            ],
            "detail": "Socket(string $family, string $type)",
            "value": "Socket($0)",
            "documentation": "This class allows POSIX like socket(2) code. A socket resource is created for each Socket instance, this resource is automatically garbage collected (closed) once the object is destroyed.",
            "link": "[Full documentation]({{ docsurl }}functions.html#Socket)"
        },
        {
            "name": "TLSSocket",
            "parameters": {
                "required": [
                    {
                        "name": "socket",
                        "type": "Socket"
                    },
                    {
                        "name": "options",
                        "type": "array"
                    }
                ],
                "optional": []
            },
            "methods": [
                {
                    "name": "handshake",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "TLSSocket or none",
                    "detail": "TLSSocket->handshake(): TLSSocket or none",
                    "value": "handshake()",
                    "documentation": "Perform the TLS\/SSL handshake. If the handshake fails or the validation fails none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#TLSSocket.handshake)"
                },
                {
                    "name": "recv",
                    "parameters": {
                        "required": [
                            {
                                "name": "length",
                                "type": "number"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "string or none",
                    "detail": "TLSSocket->recv(number $length): string or none",
                    "value": "recv($0)",
                    "documentation": "Receive data on TLS\/SSL socket. This function may perform an implicit handshake. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#TLSSocket.recv)"
                },
                {
                    "name": "send",
                    "parameters": {
                        "required": [
                            {
                                "name": "data",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "number or none",
                    "detail": "TLSSocket->send(string $data): number or none",
                    "value": "send($0)",
                    "documentation": "Send data on TLS\/SSL socket. This function may perform an implicit handshake. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#TLSSocket.send)"
                },
                {
                    "name": "shutdown",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number or none",
                    "detail": "TLSSocket->shutdown(): number or none",
                    "value": "shutdown()",
                    "documentation": "Shut down the TLS\/SSL connection. This function may need to be called multiple times. See SSL_shutdown(3) for details. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#TLSSocket.shutdown)"
                },
                {
                    "name": "errno",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "TLSSocket->errno(): number",
                    "value": "errno()",
                    "documentation": "Get the latest errno returned from the underlying OpenSSL SSL(3) socket API.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#TLSSocket.errno)"
                },
                {
                    "name": "getpeerx509",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "X509 or none",
                    "detail": "TLSSocket->getpeerx509(): X509 or none",
                    "value": "getpeerx509()",
                    "documentation": "Get the peer certificate (X.509) as a X509 instance. On error none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#TLSSocket.getpeerx509)"
                }
            ],
            "detail": "TLSSocket(Socket $socket, array $options)",
            "value": "TLSSocket($0)",
            "documentation": "This class allows OpenSSL like SSL(3) code. The TLSSocket class takes a connected Socket instance (SOCK_STREAM) and encapsulates any read and writes in TLS\/SSL.",
            "link": "[Full documentation]({{ docsurl }}functions.html#TLSSocket)"
        },
        {
            "name": "X509",
            "parameters": {
                "required": [
                    {
                        "name": "x509resource",
                        "type": "X509Resource"
                    }
                ],
                "optional": []
            },
            "methods": [
                {
                    "name": "subject",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "array of [string, string]",
                    "detail": "X509->subject(): array of [string, string]",
                    "value": "subject()",
                    "documentation": "The subject of the certificate. The first field in the tuple is the name (eg. CN, OU) and the second is the value.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.subject)"
                },
                {
                    "name": "issuer",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "array of [string, string]",
                    "detail": "X509->issuer(): array of [string, string]",
                    "value": "issuer()",
                    "documentation": "The issuer of the certificate. The first field in the tuple is the name (eg. CN, OU) and the second is the value.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.issuer)"
                },
                {
                    "name": "subject_alt_name",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "array",
                    "detail": "X509->subject_alt_name(): array",
                    "value": "subject_alt_name()",
                    "documentation": "The subject alt names (DNS) items",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.subject_alt_name)"
                },
                {
                    "name": "version",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "X509->version(): number",
                    "value": "version()",
                    "documentation": "The version of the X.509 certificate",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.version)"
                },
                {
                    "name": "serial_number",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "string",
                    "detail": "X509->serial_number(): string",
                    "value": "serial_number()",
                    "documentation": "The serial number in HEX",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.serial_number)"
                },
                {
                    "name": "not_valid_before",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "X509->not_valid_before(): number",
                    "value": "not_valid_before()",
                    "documentation": "The start date of the certificate (in unix time)",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.not_valid_before)"
                },
                {
                    "name": "not_valid_after",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "X509->not_valid_after(): number",
                    "value": "not_valid_after()",
                    "documentation": "The end date of the certificate (in unix time)",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.not_valid_after)"
                },
                {
                    "name": "public_key",
                    "parameters": {
                        "required": [],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "string",
                    "detail": "X509->public_key([array $options]): string",
                    "value": "public_key($0)",
                    "documentation": "Export the public key in binary DER format (default) or in PEM format.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.public_key)"
                },
                {
                    "name": "export",
                    "parameters": {
                        "required": [],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "string",
                    "detail": "X509->export([array $options]): string",
                    "value": "export($0)",
                    "documentation": "Export the certificate in binary DER format (default) or in PEM format.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.export)"
                },
                {
                    "name": "toFFIValue",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "X509->toFFIValue(): FFIValue",
                    "value": "toFFIValue()",
                    "documentation": "Return a pointer to a OpenSSL X509 object representing the current X509 resource.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#X509.toFFIValue)"
                }
            ],
            "detail": "X509(X509Resource $x509resource)",
            "value": "X509($0)",
            "documentation": "This class allows you to parse an X509 resource. The X509 class takes a X509Resource.",
            "link": "[Full documentation]({{ docsurl }}functions.html#X509)"
        },
        {
            "name": "FFI",
            "parameters": {
                "required": [
                    {
                        "name": "path",
                        "type": "string"
                    }
                ],
                "optional": []
            },
            "methods": [
                {
                    "name": "func",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            },
                            {
                                "name": "arguments",
                                "type": "FFIType"
                            },
                            {
                                "name": "returntype",
                                "type": "FFIType"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIFunction or none",
                    "detail": "FFI->func(string $name, FFIType $arguments, FFIType $returntype): FFIFunction or none",
                    "value": "func($0)",
                    "documentation": "The name of the function to load, use FFI.type() to define the correct function signature. If the function is not found, none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.func)"
                },
                {
                    "name": "symbol",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIValue or none",
                    "detail": "FFI->symbol(string $name): FFIValue or none",
                    "value": "symbol($0)",
                    "documentation": "Return a pointer to a global symbol in the library (eg. a variable). This function is the equivalent of dlsym(2). If the symbol is not found, none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.symbol)"
                },
                {
                    "static": true,
                    "name": "type",
                    "parameters": {
                        "required": [
                            {
                                "name": "name",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIType",
                    "detail": "FFI::type(string $name): FFIType",
                    "value": "type($0)",
                    "documentation": "A factory function for FFI types. This function is usually used to declare the function signature of an FFIFunction.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.type)"
                },
                {
                    "static": true,
                    "name": "cnumber",
                    "parameters": {
                        "required": [
                            {
                                "name": "type",
                                "type": "FFIType"
                            },
                            {
                                "name": "number",
                                "type": "number"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::cnumber(FFIType $type, number $number): FFIValue",
                    "value": "cnumber($0)",
                    "documentation": "Create an FFIValue containing a C number. It's a basic type, which exists for the lifetime of the returned value and passed by value.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.cnumber)"
                },
                {
                    "static": true,
                    "name": "cstring",
                    "parameters": {
                        "required": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::cstring(string $value): FFIValue",
                    "value": "cstring($0)",
                    "documentation": "Allocate a null-terminated C string (char *) in memory from a HSL string and return an FFIValue of pointer type pointing to that memory. This memory is owned by the FFIValue resource (use the FFI.detach() function to disclaim ownership). This function is intentionally not binary safe.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.cstring)"
                },
                {
                    "static": true,
                    "name": "callback",
                    "parameters": {
                        "required": [
                            {
                                "name": "arguments",
                                "type": "FFIType"
                            },
                            {
                                "name": "returntype",
                                "type": "FFIType"
                            },
                            {
                                "name": "callback",
                                "type": "function"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::callback(FFIType $arguments, FFIType $returntype, function $callback): FFIValue",
                    "value": "callback($0)",
                    "documentation": "Allocate a FFI callback function and return a FFIValue of pointer type pointing to that function. This pointer can be passed a pointer to a FFI function taking a C function pointer. This memory is owned by the FFIValue resource (use the FFI.detach() function to disclaim ownership). The callback function argument will be FFI types and the return type needs to be of FFI type as well.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.callback)"
                },
                {
                    "static": true,
                    "name": "nullptr",
                    "parameters": {
                        "required": [],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::nullptr(): FFIValue",
                    "value": "nullptr()",
                    "documentation": "Create an FFIValue containing a NULL pointer.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.nullptr)"
                },
                {
                    "static": true,
                    "name": "allocate",
                    "parameters": {
                        "required": [
                            {
                                "name": "size",
                                "type": "any"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::allocate(any $size): FFIValue",
                    "value": "allocate($0)",
                    "documentation": "Allocate memory of size in bytes and return an FFIValue of pointer type pointing to that memory. This memory is owned by the FFIValue resource (use the FFI.detach() function to disclaim ownership). The memory is initially filled with zeros.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.allocate)"
                },
                {
                    "static": true,
                    "name": "memcpy",
                    "parameters": {
                        "required": [
                            {
                                "name": "pointer",
                                "type": "FFIValue"
                            },
                            {
                                "name": "data",
                                "type": "string"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::memcpy(FFIValue $pointer, string $data): FFIValue",
                    "value": "memcpy($0)",
                    "documentation": "Copy the binary content of (string) data into memory location pointed to by an FFIValue of pointer type. The caller must make sure the pointer location is of sufficient length.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.memcpy)"
                },
                {
                    "static": true,
                    "name": "byref",
                    "parameters": {
                        "required": [
                            {
                                "name": "value",
                                "type": "FFIValue"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::byref(FFIValue $value): FFIValue",
                    "value": "byref($0)",
                    "documentation": "Return an FFIValue of pointer type pointing to the FFIValue value.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.byref)"
                },
                {
                    "static": true,
                    "name": "deref",
                    "parameters": {
                        "required": [
                            {
                                "name": "value",
                                "type": "FFIValue"
                            }
                        ],
                        "optional": [
                            {
                                "name": "type",
                                "type": "FFIType"
                            }
                        ]
                    },
                    "returnType": "FFIValue or none",
                    "detail": "FFI::deref(FFIValue $value [, FFIType $type]): FFIValue or none",
                    "value": "deref($0)",
                    "documentation": "Return an FFIValue with FFIType of type with the value at the address pointed at by the FFIValue value. The default type is pointer. If the type is a pointer and dereferenced pointer points to NULL then none is returned.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.deref)"
                },
                {
                    "static": true,
                    "name": "offset",
                    "parameters": {
                        "required": [
                            {
                                "name": "pointer",
                                "type": "FFIValue"
                            },
                            {
                                "name": "offset",
                                "type": "number"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::offset(FFIValue $pointer, number $offset): FFIValue",
                    "value": "offset($0)",
                    "documentation": "Return a new FFIValue of pointer type pointing the same memory with an offset.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.offset)"
                },
                {
                    "static": true,
                    "name": "string",
                    "parameters": {
                        "required": [
                            {
                                "name": "pointer",
                                "type": "FFIValue"
                            }
                        ],
                        "optional": [
                            {
                                "name": "size",
                                "type": "number"
                            }
                        ]
                    },
                    "returnType": "string",
                    "detail": "FFI::string(FFIValue $pointer [, number $size]): string",
                    "value": "string($0)",
                    "documentation": "Copy the binary content of a memory location pointed to by an FFIValue of pointer type to a HSL string. If the size is omitted the memory will be copied up to the first NULL character as a null-terminated C string (char *).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.string)"
                },
                {
                    "static": true,
                    "name": "number",
                    "parameters": {
                        "required": [
                            {
                                "name": "value",
                                "type": "FFIValue"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "number",
                    "detail": "FFI::number(FFIValue $value): number",
                    "value": "number($0)",
                    "documentation": "Convert an FFI value to a HSL number. The number type can safely represent all integers between +\/-9007199254740991 (the equivalent of (2 ** 53) - 1). If you expect to work with greater numbers use FFI.number64().",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.number)"
                },
                {
                    "static": true,
                    "name": "number64",
                    "parameters": {
                        "required": [
                            {
                                "name": "value",
                                "type": "FFIValue"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "array of number",
                    "detail": "FFI::number64(FFIValue $value): array of number",
                    "value": "number64($0)",
                    "documentation": "Convert an FFI value (uint64, sint64 or pointer) to a pair of two 32 bit integers ([high, low]). For signed negative numbers a two complement representation is used.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.number64)"
                },
                {
                    "static": true,
                    "name": "attach",
                    "parameters": {
                        "required": [
                            {
                                "name": "pointer",
                                "type": "FFIValue"
                            }
                        ],
                        "optional": [
                            {
                                "name": "destructor",
                                "type": "FFIFunction"
                            }
                        ]
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::attach(FFIValue $pointer [, FFIFunction $destructor]): FFIValue",
                    "value": "attach($0)",
                    "documentation": "Assign the ownership of the data pointed to by the pointer argument (FFIValue of pointer type). The default destructor is free. An optional destructor FFIFunction (should have one pointer argument) may be given.",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.attach)"
                },
                {
                    "static": true,
                    "name": "detach",
                    "parameters": {
                        "required": [
                            {
                                "name": "pointer",
                                "type": "FFIValue"
                            }
                        ],
                        "optional": []
                    },
                    "returnType": "FFIValue",
                    "detail": "FFI::detach(FFIValue $pointer): FFIValue",
                    "value": "detach($0)",
                    "documentation": "Remove the ownership of the data pointed to by the pointer argument (FFIValue of pointer type).",
                    "link": "[Full documentation]({{ docsurl }}functions.html#FFI.detach)"
                }
            ],
            "detail": "FFI(string $path)",
            "value": "FFI($0)",
            "documentation": "This class allows you to load a shared object\/library.",
            "link": "[Full documentation]({{ docsurl }}functions.html#FFI)"
        }
    ],
    "connect": [],
    "disconnect": [],
    "proxy": [],
    "helo": [],
    "auth": [],
    "mailfrom": [],
    "rcptto": [],
    "eodonce": [
        {
            "name": "EODMailMessage",
            "parameters": {
                "required": [],
                "optional": []
            },
            "methods": [
                {
                    "name": "queue",
                    "parameters": {
                        "required": [
                            {
                                "name": "sender",
                                "type": "string or array"
                            },
                            {
                                "name": "recipient",
                                "type": "string or array"
                            },
                            {
                                "name": "transportid",
                                "type": "string"
                            }
                        ],
                        "optional": [
                            {
                                "name": "options",
                                "type": "array"
                            }
                        ]
                    },
                    "returnType": "array",
                    "detail": "EODMailMessage->queue(string or array $sender, string or array $recipient, string $transportid [, array $options]): array",
                    "value": "queue($0)",
                    "documentation": "Queue the message.",
                    "link": "[Full documentation]({{ docsurl }}eodonce.html#EODMailMessage.queue)"
                }
            ],
            "detail": "EODMailMessage()",
            "value": "EODMailMessage()",
            "link": "[Full documentation]({{ docsurl }}eodonce.html#EODMailMessage)"
        }
    ],
    "eodrcpt": [],
    "predelivery": [],
    "postdelivery": [],
    "api": [],
    "firewall": []
}
