{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Halon Scripting Language",
  "patterns": [
    {
      "include": "#invalid"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#rawstrings"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#functions"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.hsl",
          "match": "\\b(if|while|for|return|foreach|else|forever|break|continue|switch|case|default)\\b"
        },
        {
          "name": "keyword.operator.hsl",
          "match": "(&|\\^|\\||<<|>>>|>>|~)"
        },
        {
          "name": "keyword.operator.hsl",
          "match": "(\\+\\+|\\-\\-)"
        },
        {
          "name": "keyword.operator.hsl",
          "match": "([?][?]|->|\\.\\.\\.|\\*\\*|\\*\\*=|\\-=|\\+=|-=|\\/=|\\*=|%=|=~|!~|==|!=|<=|>=|=>)"
        },
        {
          "name": "keyword.operator.hsl",
          "match": "(;|\\.|\\+|-|\\*|%|\\/|!|=|,|\\?|:|>|<)"
        },
        {
          "name": "keyword.operator.word.hsl",
          "match": "\\b(or|and|not)\\b"
        },
        {
          "name": "keyword.other.hsl",
          "match": "\\b(echo|barrier|as|function|global|include|include_once|cache|closure|object|builtin|import|from|with|static|class|constructor|private|readonly|yield)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.hsl",
          "match": "\\b(true|false|none)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.hsl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.hsl",
          "match": "\\\\(x[0-9a-fA-F]{2}|[\\\\\"$nrt])"
        },
        {
          "include": "#variables"
        },
        {
          "name": "variable.other.hsl",
          "match": "%(\\[\\d+\\])?('.)?[<>=^]?(\\d+)?(\\.\\d+)?[sfxcb]"
        },
        {
          "name": "punctuation.definition.variable.hsl",
          "match": "(\\$)\\{([a-zA-Z_]+[a-zA-Z0-9_]*)\\}",
          "captures": {
            "1": { "name": "punctuation.definition.variable.hsl" },
            "2": { "name": "variable.other.hsl" }
          }
        }
      ]
    },
    "rawstrings": {
      "name": "string.quoted.other.hsl",
      "begin": "'([\\x21-\\x26\\x28-\\x7e]*)'",
      "end": "'(\\1)'",
      "captures": {
        "1": { "name": "keyword.other.hsl" }
      },
      "patterns": []
    },		
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.hsl",
          "match": "([0-9]+(_[0-9]+)*\\.[0-9]+(_[0-9]+)*)"
        },
        {
          "name": "constant.numeric.hex.hsl",
          "match": "(0x[0-9a-fA-F]+(_[0-9a-fA-F]+)*)"
        },
        {
          "name": "constant.numeric.octal.hsl",
          "match": "(0o[0-7]+(_[0-7]+)*)"
        },
        {
          "name": "constant.numeric.binary.hsl",
          "match": "(0b[0-1]+(_[0-1]+)*)"
        },
        {
          "name": "constant.numeric.integer.hsl",
          "match": "([0-9]+(_[0-9]+)*)"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.hsl",
          "match": "(\\$)[a-zA-Z_]+[a-zA-Z0-9_]*",
          "captures": {
            "1": { "name": "punctuation.definition.variable.hsl" }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.hsl",
          "match": "\\\/\\\/.*"
        },
        {
          "name": "comment.block.hsl",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "invalid": {
      "patterns": [
        {
          "name": "invalid.illegal.hsl",
          "match": "\\b(this|self|public|protected|struct|clone|final|const|goto|namespace|new|catch|try|interface|throw|in|extends|print|trait|assert|finally|lambda|pass|destroy|export|use)\\b"
        },
        {
          "name": "invalid.illegal.hsl",
          "match": "([0-9]+(_[0-9]+)*\\.[0-9]+(_[0-9]+)*\\.[0-9]+(_[0-9]+)*)"
        },
        {
          "name": "invalid.illegal.hsl",
          "match": "[“”]"
        },
        {
          "name": "invalid.illegal.hsl",
          "match": "[\\xa0]+"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.hsl",
          "match": "[a-zA-Z_]+[a-zA-Z_0-9]*"
        }
      ]
    }
  },
  "scopeName": "source.hsl"
}
